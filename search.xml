<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>vuex上手</title>
    <url>/2021/2021121501/</url>
    <content><![CDATA[<p>了解 vuex 的特性，写了个 demo，<a href="/demo/vuex%E4%B8%8A%E6%89%8B.html">本文示例</a></p>
<span id="more"></span>

<h2 id="1-核心概念"><a href="#1-核心概念" class="headerlink" title="1 核心概念"></a>1 核心概念</h2><ul>
<li>modules 模块<ul>
<li>state 状态</li>
<li>getters 获取状态属性</li>
<li>mutations 改变状态（同步）</li>
<li>acitons 改变状态（异步）</li>
</ul>
</li>
</ul>
<h2 id="2-示例代码"><a href="#2-示例代码" class="headerlink" title="2 示例代码"></a>2 示例代码</h2><h3 id="2-1-CDN-方式引入-vue、vuex"><a href="#2-1-CDN-方式引入-vue、vuex" class="headerlink" title="2.1 CDN 方式引入 vue、vuex"></a>2.1 CDN 方式引入 vue、vuex</h3><ul>
<li><p>外国 cdn</p>
<ul>
<li><p><code>https://unpkg.com/vue</code></p>
</li>
<li><p><code>https://unpkg.com/vuex</code></p>
</li>
</ul>
</li>
<li><p>gitee 博客托管：</p>
<ul>
<li><code>https://koalamini.gitee.io/library/vue.min.js</code></li>
<li><code>https://koalamini.gitee.io/library/vuex.js</code></li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vuex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-2-vuex-示例"><a href="#2-2-vuex-示例" class="headerlink" title="2.2 vuex 示例"></a>2.2 vuex 示例</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> modulesA = &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 命名空间</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">namespaced</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 状态</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">todos</span>: [</span></span><br><span class="line"><span class="language-javascript">        &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">id</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">text</span>: <span class="string">&quot;已完成的任务&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">done</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">id</span>: <span class="number">2</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">text</span>: <span class="string">&quot;未完成的任务&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">done</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      ],</span></span><br><span class="line"><span class="language-javascript">    &#125;),</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取状态属性</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">getters</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 获取完成的任务</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">doneTodos</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> state.<span class="property">todos</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">todo</span>) =&gt;</span> todo.<span class="property">done</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 获取完成任务的数量</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">doneTodosCount</span>: <span class="function">(<span class="params">state, getters</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> getters.<span class="property">doneTodos</span>.<span class="property">length</span>;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 根据ID获取任务</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">getTodoById</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> <span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> state.<span class="property">todos</span>.<span class="title function_">find</span>(<span class="function">(<span class="params">todo</span>) =&gt;</span> todo.<span class="property">id</span> === id);</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 改变状态（同步）</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">mutations</span>: &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 改变状态（异步）</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">actions</span>: &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> modulesB = &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">namespaced</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">state</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">count</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 改变状态（同步）</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">mutations</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 计数+1</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">increment</span>(<span class="params">state</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        state.<span class="property">count</span>++;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 计数+n，提交载荷</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">incrementPayload</span>(<span class="params">state, n</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        state.<span class="property">count</span> += n;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 改变状态（异步）</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">actions</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">incrementAsync</span>(<span class="params">context</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          context.<span class="title function_">commit</span>(<span class="string">&quot;incrementPayload&quot;</span>, <span class="number">10</span>);</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;5秒后，b/count&quot;</span>, context.<span class="property">state</span>.<span class="property">count</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="number">5</span> * <span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// vuex存储</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">modules</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">a</span>: modulesA,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">b</span>: modulesB,</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 获取状态</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a/doneTodos&quot;</span>, store.<span class="property">getters</span>[<span class="string">&quot;a/doneTodos&quot;</span>]);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 改变状态</span></span></span><br><span class="line"><span class="language-javascript">  store.<span class="title function_">commit</span>(<span class="string">&quot;b/increment&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;b/count&quot;</span>, store.<span class="property">state</span>.<span class="property">b</span>.<span class="property">count</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">store</span>: store,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">message</span>: <span class="string">&quot;请按【f12】查看控制台&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 计数异步增加</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">incrementAsync</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// vuex派发</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&quot;b/incrementAsync&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 挂载后</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="title function_">incrementAsync</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<img src="/2021/2021121501/image-20211220140804659.png" class="" title="image-20211220140804659">

<ul>
<li>通过<code>namespaced</code>控制多模块，通过<code>模块/状态属性名</code>访问相应模块的状态属性</li>
<li>同步改变状态<code>mutations</code>方式，只能通过<code>store</code>实例方法<code>commit</code>修改，直接修改会报<code>Error in callback for watcher &quot;function () &#123; return this._data.$$state &#125;&quot;</code>错误，<a href="https://www.cnblogs.com/koalamini/p/15710013.html">详情</a></li>
<li>异步改变状态<code>actions</code>方式，需要通过<code>store</code>实例方法<code>dispatch</code>修改</li>
</ul>
<hr>
<p><strong>参考资料</strong></p>
<ul>
<li><a href="https://vuex.vuejs.org/zh/">Vuex 是什么？ | Vuex (vuejs.org)</a></li>
<li><a href="https://blog.csdn.net/flyingdream123/article/details/115426644">Vuex 状态管理库在 HTML 中的直接使用例子_flyingdream123 的专栏-CSDN 博客_html 中使用 vuex</a></li>
</ul>
]]></content>
      <categories>
        <category>程序猿</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>考拉周刊第1期</title>
    <url>/2024/2024030201/</url>
    <content><![CDATA[<p>换位思考与共情是超能力，Arc 浏览器的 WebOS 理念我深表赞同，古腾堡原理应用于信息排版，期待苹果的 AI 体验，坚持冥想很重要</p>
<span id="more"></span>

<h2 id="1-产品汪"><a href="#1-产品汪" class="headerlink" title="1 产品汪"></a>1 产品汪</h2><p><a href="https://www.innoreader.com/article/3a9c6e74e6b30293-ipad-lok-board">https://www.innoreader.com/article/3a9c6e74e6b30293-ipad-lok-board</a></p>
<p><a href="https://m.okjike.com/originalPosts/65de9e766d9f190631c4a336">https://m.okjike.com/originalPosts/65de9e766d9f190631c4a336</a></p>
<p><a href="https://bytedance.larkoffice.com/minutes/obcn1711lrh7h5rfj2k4gu5f">https://bytedance.larkoffice.com/minutes/obcn1711lrh7h5rfj2k4gu5f</a></p>
<p><code>浏览器</code> <code>产品理念</code> <code>产品趋势</code></p>
<p>不管是 iPad 的 Lok Board 浏览器，还是 chrome 插件 Sidespace，都是向 Arc 浏览器”致敬“，哦，还有一个飞书 7.0，WebOS 的概念我深表赞同，未来的操作系统是“云端”的，本地主机一个“浏览器”搞定。</p>
<p><a href="https://www.woshipm.com/share/5998653.html">https://www.woshipm.com/share/5998653.html</a></p>
<p><code>竞品分析</code></p>
<p>作者将竞品收集渠道氛围：官方网站、社交媒体账号、招聘账号，科技类媒体，应用商店用户评价。</p>
<p>我认为是分为间接和直接，间接就是在互联网上找公开信息分析，直接就是扮演用户去体验，扮演求职者去刺探“军情”。</p>
<p><a href="https://www.woshipm.com/share/6000705.html">https://www.woshipm.com/share/6000705.html</a></p>
<p><code>产品经理素质</code> <code>产品职业观</code></p>
<p>作者认为好的产品经理的素质：愿意写需求文档、愿意写迭代产品、愿意跟相关方沟通、愿意亲自去使用产品、愿意帮用户解决问题、愿意接触新事物、愿意思考总结</p>
<p>你在用别人产品的时候，会去积极的反馈问题和意见吗？如果会，那你就可以成为优秀的产品经理。我认为这种“热情”造就优秀产品经理。</p>
<p><a href="https://www.woshipm.com/share/6000046.html">https://www.woshipm.com/share/6000046.html</a></p>
<p><code>需求分析</code></p>
<p>作者将需求分为<strong>方案级</strong>和<strong>问题级</strong>。方案级就是客户&#x2F;用户直接告诉你怎么改，或者说要加 XX 功能，遇到这种需求要谨慎，要分析清楚用户的场景和问题；问题级就是客户&#x2F;用户告诉你他遇到了啥问题，这比较好，但建议多问几句为什么，找本质需求。<u>拒绝”傻白甜“产品经理，不再被客户&#x2F;用户”骗“到</u></p>
<p>将需求分为 2 个层级，挺不错的理解，需求方面建议看张小龙的《微信背后的产品观》。</p>
<p><a href="https://m.okjike.com/originalPosts/65d6ac926d9f1906312b17c3">https://m.okjike.com/originalPosts/65d6ac926d9f1906312b17c3</a></p>
<p><a href="https://m.okjike.com/originalPosts/6455c8b3205bd8b62ef2b6d3?s=eyJ1IjoiNTllNTZkZWMzNTMzNWYwMDE1OGE3YTU3IiwiZCI6MX0=">https://m.okjike.com/originalPosts/6455c8b3205bd8b62ef2b6d3?s=eyJ1IjoiNTllNTZkZWMzNTMzNWYwMDE1OGE3YTU3IiwiZCI6MX0%3D</a></p>
<p><code>产品经理素质</code></p>
<p>【推荐】YC 孵化器的创始人 Paul Graham 可以轻易的模拟没有背景的人的体验，忘记自己，化身为用户，<u>换位思考与共情是超能力</u>。</p>
<p>作者将产品经理的换位思考分为 5 个层次，L0 生理层面、L1 协作、L2 需求理解、L3 场景与用户画像、L4 小白思维（Paul Graham 层次）、L5 人类共性（乔布斯、比尔盖茨层次）。</p>
<p>三大支柱：演化论、热力学熵增、信息论</p>
<p><a href="https://web.okjike.com/originalPost/65c9ca77362466632463a96e">https://web.okjike.com/originalPost/65c9ca77362466632463a96e</a></p>
<p><a href="https://www.woshipm.com/operate/6001196.html">https://www.woshipm.com/operate/6001196.html</a></p>
<p><code>产品观察</code></p>
<p>今年微信 2 大改版，摇一摇变听一听，搜一搜扶持问一问，改得这么自然，推得这么无感，表示佩服</p>
<p><a href="http://www.ruanyifeng.com/blog/2024/02/weekly-issue-290.html">http://www.ruanyifeng.com/blog/2024/02/weekly-issue-290.html</a></p>
<p><code>交互设计</code></p>
<p>作者认为苹果 Vision Pro 最大问题是窗口堆叠很难用。</p>
<p>我：眼睛聚焦堆叠窗口时，爆炸开让用户选择？类似于 Mac 电脑上的 Command + ⬆️</p>
<h2 id="2-设计狮"><a href="#2-设计狮" class="headerlink" title="2 设计狮"></a>2 设计狮</h2><p><a href="https://www.woshipm.com/share/6001523.html">https://www.woshipm.com/share/6001523.html</a></p>
<p>【推荐】介绍了古腾堡原理、F 型阅读模式、Z 型布局，可用于指导信息排版</p>
<p><a href="https://www.zcool.com.cn/article/ZMTYwNzkyMA==.html">https://www.zcool.com.cn/article/ZMTYwNzkyMA==.html</a></p>
<p>介绍了蜡笔效果、复古弥撒、微酸映射三种艺术效果海报的制作技巧，可借鉴于 UI 视觉设计</p>
<h2 id="3-AI"><a href="#3-AI" class="headerlink" title="3 AI"></a>3 AI</h2><p><a href="https://www.woshipm.com/share/6001417.html">https://www.woshipm.com/share/6001417.html</a></p>
<p>【重大新闻】苹果放弃造车，转向 AI，期待苹果的 AI 体验</p>
<p><a href="https://mp.weixin.qq.com/s/zrIMM3HFDLWhIsRDcB7utA">https://mp.weixin.qq.com/s/zrIMM3HFDLWhIsRDcB7utA</a></p>
<p>老 AI 四小龙：云从、商汤、旷视、依图</p>
<p>新 AI 独角兽：智谱 AI、MiniMax、百川智能、零一万物、月之暗面</p>
<p><a href="https://mp.weixin.qq.com/s/jKTgbc2CiOLpgjiBqqE_iw">https://mp.weixin.qq.com/s/jKTgbc2CiOLpgjiBqqE_iw</a></p>
<p>谷歌 AI 种族歧视引起轩然大波，谷歌 AI 滑铁卢，我想是因为文化初心丢了的缘故</p>
<h2 id="4-其他"><a href="#4-其他" class="headerlink" title="4 其他"></a>4 其他</h2><p><a href="https://m.okjike.com/originalPosts/65d6ce9f12ed2fda6838e323">https://m.okjike.com/originalPosts/65d6ce9f12ed2fda6838e323</a></p>
<p><code>高薪</code> <code>裁员</code> <code>中年危机</code></p>
<p>高薪有时候代表你比较会做汇报，比较懂办公室政治，公司经营困难时，首先砍掉你。</p>
<p>高薪不代表市场价值，同样的，市场价值不代表高薪。薪水服从市场规律，有价格高于价值的“虚高”，也有低于价值的“性价比”</p>
<p><a href="https://m.okjike.com/originalPosts/65e00289f6eb225f3b81de7e">https://m.okjike.com/originalPosts/65e00289f6eb225f3b81de7e</a></p>
<p>#卖课 #割韭菜 #自媒体</p>
<p>移动互联网培育了自媒体，自媒体培育了短视频，短视频培育了直播，直播培育了话术，话术被用于卖课和电信诈骗</p>
<h2 id="5-成长"><a href="#5-成长" class="headerlink" title="5 成长"></a>5 成长</h2><ul>
<li>在新公司重新有了做产品经理的感觉，主动沟通获得正反馈</li>
<li>我的用户视角是有了，但是客户业务视角有些欠缺，领导视角直接是无。。。</li>
<li>利用 inoreader RSS 阅读器，大量阅读资讯，通过评论促进思考，考拉周刊就是我思考的产物</li>
<li>我觉醒了新天赋“自言自语”，这有利于我的心理健康</li>
<li>要坚持冥想，很有用</li>
</ul>
<hr>
<p><strong>更新日志</strong></p>
<ul>
<li>20240307： 增加&lt;其他&gt;板块，给每一条资讯增加关键词标签</li>
</ul>
]]></content>
      <categories>
        <category>考拉周刊</category>
      </categories>
      <tags>
        <tag>观察记录</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac上homebrew安装与卸载</title>
    <url>/2024/2024030302/</url>
    <content><![CDATA[<p>用清华镜像安装与卸载 homebrew</p>
<span id="more"></span>

<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><blockquote>
<p><strong>环境说明</strong></p>
<p>M1 芯片 MacOS14(Sonoma)</p>
</blockquote>
<p>因为国内环境的缘故，用<a href="https://mirrors.tuna.tsinghua.edu.cn/help/homebrew/">清华大学镜像站</a>安装 homebrew</p>
<h2 id="安装-Command-Line-Tools-CLT-for-Xcode"><a href="#安装-Command-Line-Tools-CLT-for-Xcode" class="headerlink" title="安装 Command Line Tools (CLT) for Xcode"></a>安装 Command Line Tools (CLT) for Xcode</h2><p>输入<code>xcode-select --install</code></p>
<h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><img src="/2024/2024030302/image-20240303154946828.png" class="" title="image-20240303154946828">

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export HOMEBREW_INSTALL_FROM_API=1</span><br><span class="line">export HOMEBREW_API_DOMAIN=&quot;https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/api&quot;</span><br><span class="line">export HOMEBREW_BOTTLE_DOMAIN=&quot;https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles&quot;</span><br><span class="line">export HOMEBREW_BREW_GIT_REMOTE=&quot;https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git&quot;</span><br></pre></td></tr></table></figure>

<h2 id="克隆安装"><a href="#克隆安装" class="headerlink" title="克隆安装"></a>克隆安装</h2><img src="/2024/2024030302/image-20240303151617963.png" class="" title="image-20240303151617963">

<p>为了理解<code>git clone --depth=1 https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/install.git brew-install /bin/bash brew-install/install.sh</code>命令，这里拆解执行</p>
<p><strong>1 克隆文件到<code>brew-install</code>文件夹内</strong></p>
<p><code>git clone --depth=1 https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/install.git brew-install</code></p>
<img src="/2024/2024030302/image-20240303152405525.png" class="" title="image-20240303152405525">

<img src="/2024/2024030302/image-20240303152457610.png" class="" title="image-20240303152457610">

<p><strong>2 运行<code>install.sh</code>文件</strong></p>
<p>选中<code>brew-install</code>文件夹右键选择【新建位于文件夹位置的终端窗口】</p>
<img src="/2024/2024030302/image-20240303152615974.png" class="" title="image-20240303152615974">

<p>输入<code>./install.sh</code>运行<code>install.sh</code>脚本</p>
<img src="/2024/2024030302/image-20240303153341438.png" class="" title="image-20240303153341438">

<img src="/2024/2024030302/image-20240303154630149.png" class="" title="image-20240303154630149">

<blockquote>
<p>下载会比较慢，请耐心等待</p>
</blockquote>
<p>输入<code>brew --version</code>和<code>brew --help</code>，有结果表示安装成功</p>
<img src="/2024/2024030302/image-20240303162408007.png" class="" title="image-20240303162408007">

<p>打开访达，使用快捷键<code>Shift + Command + G</code>前往<code>/opt</code>可以查看 homebrew 安装在隐藏目录<code>/opt</code>里面（M 芯片才是这个路径）</p>
<img src="/2024/2024030302/image-20240303162720071.png" class="" title="image-20240303162720071">

<img src="/2024/2024030302/image-20240303162858321.png" class="" title="image-20240303162858321">

<h1 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h1><p>用终端打开<code>user/koalamini</code>路径，输入<code>./uninstall.sh</code>卸载 homebrew</p>
<hr>
<p><strong>参考资料</strong></p>
<ul>
<li><a href="https://mirrors.tuna.tsinghua.edu.cn/help/homebrew/">https://mirrors.tuna.tsinghua.edu.cn/help/homebrew/</a></li>
<li><a href="https://sspai.com/post/56009">https://sspai.com/post/56009</a></li>
</ul>
<p><strong>更新日志</strong></p>
<ul>
<li>初稿：2024-03-03</li>
</ul>
]]></content>
      <categories>
        <category>程序猿</category>
        <category>环境配置</category>
      </categories>
      <tags>
        <tag>Mac环境</tag>
        <tag>包管理器</tag>
      </tags>
  </entry>
  <entry>
    <title>考拉周刊第2期</title>
    <url>/2024/2024030901/</url>
    <content><![CDATA[<p>文档约会与文档招聘可以找到高质量伴侣和合伙人</p>
<span id="more"></span>

<h1 id="产品汪"><a href="#产品汪" class="headerlink" title="产品汪"></a>产品汪</h1><table>
<thead>
<tr>
<th><strong>链接</strong></th>
<th><strong>标签</strong></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.bilibili.com/video/BV1WS421P71V">https://www.bilibili.com/video/BV1WS421P71V</a></td>
<td>#数据分析</td>
</tr>
</tbody></table>
<p>数据分析是一种思维方式，包括三个方面：业务分析、数据治理、数据挖掘。博主必看四张表：财务收支表、销售订单表、市场渠道表、用户流程表。</p>
<table>
<thead>
<tr>
<th><strong>链接</strong></th>
<th><strong>标签</strong></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.woshipm.com/operate/6006208.html">https://www.woshipm.com/operate/6006208.html</a></td>
<td>#竞品分析</td>
</tr>
</tbody></table>
<p>作者对抖音和小红书做了对比分析，维度：用户构成、平台调性、内容形式、点赞收藏比、长尾价值、营销策略。</p>
<h1 id="职场"><a href="#职场" class="headerlink" title="职场"></a>职场</h1><table>
<thead>
<tr>
<th>链接</th>
<th>标签</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.woshipm.com/share/6004797.html">https://www.woshipm.com/share/6004797.html</a></td>
<td>#沟通协作</td>
</tr>
</tbody></table>
<p>团队知识库是用来沟通达成共识的，同时方便工作交接的，还有就是培养新人的。<u>知识库创建不难，难得是大家都去维护。</u></p>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><table>
<thead>
<tr>
<th>链接</th>
<th>标签</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.woshipm.com/it/6004603.html">https://www.woshipm.com/it/6004603.html</a></td>
<td>#陌生人社交</td>
</tr>
<tr>
<td><a href="https://o4zve8g6m2.feishu.cn/minutes/obcnya58ra71ejd6xsxan124">https://o4zve8g6m2.feishu.cn/minutes/obcnya58ra71ejd6xsxan124</a></td>
<td>#人力资源</td>
</tr>
</tbody></table>
<p>第 1 篇介绍了 Dateme.doc 文档约会的新约会形式，第 2 篇介绍了 Boss 通过写高质量文章吸引人才的新招聘形式，两者有异曲同工之妙。</p>
<p>传统陌生人社交 App 面向下沉市场年轻人，文档约会面向高知识年轻人。</p>
<p>传统招聘形式只能招到普通员工，文档招聘可以招到人才。</p>
<hr>
<p><strong>更新日志</strong></p>
<ul>
<li>2024-03-09： 创建</li>
</ul>
]]></content>
      <categories>
        <category>考拉周刊</category>
      </categories>
      <tags>
        <tag>观察记录</tag>
      </tags>
  </entry>
  <entry>
    <title>frp内网穿透</title>
    <url>/2024/2024072701/</url>
    <content><![CDATA[<p>之前<code>ddns-go + ipv6</code>方案失效了，买了台阿里云服务器做内网穿透，上个周末折腾了 1 天没成功，昨晚+今天上午搞成功了，😆 开心～</p>
<span id="more"></span>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前提条件：一台有公网 IP 的服务器</p>
<p>输入<code>uname -u</code>查询当前系统架构，然后到<a href="https://github.com/fatedier/frp/releases">frp</a>下载对应的安装包</p>
<table>
<thead>
<tr>
<th>操作系统</th>
<th>系统架构</th>
<th>安装包类型</th>
<th>分工</th>
</tr>
</thead>
<tbody><tr>
<td>苹果芯片 Mac</td>
<td>arm64</td>
<td>arm64</td>
<td>frpc（客户端：要穿透的内网机器）</td>
</tr>
<tr>
<td>Alibaba Cloud Linux3</td>
<td>x86_64</td>
<td>amd64</td>
<td>frps（服务端）</td>
</tr>
</tbody></table>
<p>安装包清单如下：</p>
<ul>
<li>frps</li>
<li>frps.toml</li>
<li>frpc</li>
<li>frpc.toml</li>
<li>LICENSE</li>
</ul>
<p><code>.toml</code>是配置文件</p>
<h1 id="安装与配置"><a href="#安装与配置" class="headerlink" title="安装与配置"></a>安装与配置</h1><h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><p>完整的 frps 配置可以参考<a href="https://github.com/fatedier/frp/blob/dev/conf/frps_full_example.toml">官方</a></p>
<figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># frps.toml</span></span><br><span class="line"><span class="attr">bindPort</span> = <span class="number">7000</span>  <span class="comment"># 客户端连接的端口</span></span><br><span class="line"><span class="attr">log.to</span> = <span class="string">&quot;/var/log/frps.log&quot;</span>  <span class="comment"># 日志路径</span></span><br></pre></td></tr></table></figure>

<p>使用<code>sftp</code>工具，将<code>frps</code>文件上传到<code>usr/local/bin</code>目录下，将<code>frps.toml</code>文件上传到<code>/opt</code>目录下</p>
<h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p>完整的 frpc 配置可以参考<a href="https://github.com/fatedier/frp/blob/dev/conf/frpc_full_example.toml">官方</a></p>
<p>我 Mac 上使用 homebrew 包管理工具<code>brew install frpc</code>安装 frpc，安装路径是<code>/opt/homebrew/Cellar</code></p>
<p>homebrew 安装的 frpc.toml 路径在<code>/opt/homebrew/etc/frp</code></p>
<figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># frpc.toml</span></span><br><span class="line"><span class="attr">serverAddr</span> = <span class="string">&quot;47.255.255.198&quot;</span>  <span class="comment"># 阿里云服务器IP</span></span><br><span class="line"><span class="attr">serverPort</span> = <span class="number">7000</span>  <span class="comment"># 服务端连接的端口</span></span><br><span class="line"></span><br><span class="line"><span class="section">[[proxies]]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;aimee&quot;</span>  <span class="comment"># 代理名称</span></span><br><span class="line"><span class="attr">type</span> = <span class="string">&quot;tcp&quot;</span>  <span class="comment"># 转发类型</span></span><br><span class="line"><span class="attr">localIP</span> = <span class="string">&quot;127.0.0.1&quot;</span>  <span class="comment"># 本地ip</span></span><br><span class="line"><span class="attr">localPort</span> = <span class="number">5001</span>  <span class="comment"># 本地端口</span></span><br><span class="line"><span class="attr">remotePort</span> = <span class="number">5000</span>  <span class="comment"># 远程端口</span></span><br></pre></td></tr></table></figure>

<p>需要到阿里云 ECS 服务器上的安全组开通<code>7000</code>和<code>5000</code>端口</p>
<h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><h2 id="服务端-1"><a href="#服务端-1" class="headerlink" title="服务端"></a>服务端</h2><h3 id="单次手动启动"><a href="#单次手动启动" class="headerlink" title="单次手动启动"></a>单次手动启动</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">usr/local/bin/frps -c /opt/frps.toml</span><br></pre></td></tr></table></figure>

<h3 id="服务启动项"><a href="#服务启动项" class="headerlink" title="服务启动项"></a>服务启动项</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nano /etc/systemd/system/frps.service</span><br></pre></td></tr></table></figure>

<p><code>nano</code> 是 Linux 上轻量级文本编辑器，输入命令后，会进入编辑状态，粘贴以下内容，然后按 <code>Ctrl + X</code> 退出，按 <code>Y</code> 确认保存，按 <code>Enter</code> 保存文件</p>
<p>如果提示<code>-bash: nano: command not found</code>则用<code>yum install nano</code>安装下</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=FRP Server</span><br><span class="line"><span class="attr">After</span>=network.target</span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">ExecStart</span>=/usr/local/bin/frps -c /opt/frps.toml</span><br><span class="line"><span class="attr">Restart</span>=always</span><br><span class="line"><span class="attr">User</span>=root</span><br><span class="line"><span class="attr">Group</span>=root</span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重新加载systemd配置</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line">systemctl start frps</span><br><span class="line"><span class="comment"># 开机自启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> frps</span><br><span class="line"><span class="comment"># 检查是否成功</span></span><br><span class="line">systemctl status frps</span><br></pre></td></tr></table></figure>

<h2 id="客户端-1"><a href="#客户端-1" class="headerlink" title="客户端"></a>客户端</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line">brew services start frpc</span><br><span class="line"><span class="comment"># 检查是否成功</span></span><br><span class="line">brew services</span><br></pre></td></tr></table></figure>

<p>日志路径会存储在<code>/opt/homebrew/var/log</code>路径下</p>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>在浏览器中输入<code>http://121.255.255.198:5000</code>访问内网的 web 服务</p>
<hr>
<p><strong>参考资料</strong></p>
<ul>
<li>http 转发要求<code>customDomains</code>必填，没有域名怎么办？ <a href="https://github.com/fatedier/frp/issues/168">答案</a></li>
<li>怎么穿透多个 http 端口？ <a href="https://github.com/fatedier/frp/issues/3929">答案</a></li>
</ul>
<p><strong>更新日志</strong></p>
<ul>
<li>20240727：初稿</li>
</ul>
]]></content>
      <categories>
        <category>程序猿</category>
        <category>运维部署</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>windows平台的包管理器</title>
    <url>/2024/2024091901/</url>
    <content><![CDATA[<p>Mac 上用 Homebrew 包管理器，很爽很快捷，Windows 上也想用，找了下，微软自带的 winget 和开源的 scoop 可以搭配使用</p>
<span id="more"></span>

<h1 id="安装与使用"><a href="#安装与使用" class="headerlink" title="安装与使用"></a>安装与使用</h1><p>用 Powershell 输入<code>iwr -useb get.scoop.sh | iew</code>安装 scoop</p>
<ul>
<li><p><code>iwr</code>是<code>Invoke-WebRequest</code>的缩写，从 web 获取内容，类似于<code>curl</code>和<code>wget</code></p>
</li>
<li><p><code>iwr -useb get.scoop.sh</code> 会从 <code>get.scoop.sh</code> 下载 Scoop 的安装脚本</p>
</li>
<li><p>下载的内容通过管道操作符 <code>|</code> 传递给 <code>iex</code>， <code>iex</code>是<code>Invoke-Expression</code>的缩写</p>
</li>
<li><p><code>iex</code> 会执行下载的脚本，从而完成 Scoop 的安装</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装scoop</span></span><br><span class="line">iwr -useb get.scoop.sh | iex</span><br><span class="line"><span class="comment"># 查询scoop版本</span></span><br><span class="line">scoop --version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索</span></span><br><span class="line">scoop search nodejs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">scoop install &lt;软件包名称&gt;</span><br><span class="line"><span class="comment"># 卸载</span></span><br><span class="line">scoop uninstall &lt;软件包名称&gt;</span><br><span class="line"><span class="comment"># 更新</span></span><br><span class="line">scoop update &lt;软件包名称&gt;</span><br></pre></td></tr></table></figure>

<img src="/2024/2024091901/PixPin_2024-09-19_23-14-38.png" class="">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询已安装的软件</span></span><br><span class="line">winget list</span><br><span class="line"><span class="comment"># 搜索软件</span></span><br><span class="line">winget search &lt;name&gt;</span><br><span class="line"><span class="comment"># 查询某软件包信息</span></span><br><span class="line">winget show &lt;软件包名称&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装软件</span></span><br><span class="line">winget install &lt;name&gt;</span><br><span class="line"><span class="comment"># 卸载软件</span></span><br><span class="line">winget uninstall &lt;name&gt;</span><br><span class="line"><span class="comment"># 升级某个软件</span></span><br><span class="line">winget upgrade &lt;name&gt;</span><br><span class="line"><span class="comment"># 升级所有软件</span></span><br><span class="line">winget upgrade --all</span><br></pre></td></tr></table></figure>

<h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><img src="/2024/2024091901/PixPin_2024-09-19_23-11-47.png" class="">

<p>powershell 默认不允许执行脚本，输入下面命令开通权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Set-ExecutionPolicy RemoteSigned -Scope CurrentUser</span><br></pre></td></tr></table></figure>

<img src="/2024/2024091901/PixPin_2024-09-19_23-12-41.png" class="">

<hr>
<p><strong>更新日志</strong></p>
<ul>
<li>20240921：初稿</li>
</ul>
]]></content>
      <categories>
        <category>程序猿</category>
        <category>环境配置</category>
      </categories>
      <tags>
        <tag>Win环境</tag>
      </tags>
  </entry>
  <entry>
    <title>考拉周刊第3期</title>
    <url>/2024/2024031201/</url>
    <content><![CDATA[<p>现在这个时代，情绪价值越来越重要，也说明社会经济在发展</p>
<span id="more"></span>

<h1 id="产品汪"><a href="#产品汪" class="headerlink" title="产品汪"></a>产品汪</h1><p><a href="https://www.woshipm.com/share/6007279.html">https://www.woshipm.com/share/6007279.html</a></p>
<p><code>需求文档</code></p>
<p>对比了飞书、语雀、云效的 PRD 模板：</p>
<ul>
<li>飞书：版本信息、变更日志、文档说明（名词解释）、需求背景（产品&#x2F;数据现状、用户调研、竞品分析）、需求范围、功能详细说明（产品流程图、交互原型图、功能说明）、非功能需求、埋点、项目规划、附录。</li>
<li>语雀：变更记录、背景介绍（业务背景、业务场景）、产品概述（产品定位、服务对象、产品逻辑、信息架构、角色术语）、需求说明（需求列表、需求明细、非功能需求）、人员&amp;排期。</li>
<li>云效：基本信息（项目成员）、需求背景、产品目标、衡量指标、产品需求、功能及界面设计、问题、暂不支持、附录。</li>
</ul>
<p>个人比较赞同飞书的，再加上云效的“暂不支持”就挺好</p>
<p><a href="https://www.bilibili.com/video/BV13a411k7fE">https://www.bilibili.com/video/BV13a411k7fE</a></p>
<p><code>需求分析</code></p>
<p>博主讨论了需求边界，他分为 3 种：</p>
<ul>
<li><p>开放型： 需求无从下手</p>
</li>
<li><p>封闭型： 需求不得不做，老板说</p>
</li>
<li><p>常规型： 需求毫无新意，抄竞品就完了</p>
</li>
</ul>
<h1 id="职场"><a href="#职场" class="headerlink" title="职场"></a>职场</h1><p><a href="https://www.woshipm.com/share/6005189.html">https://www.woshipm.com/share/6005189.html</a></p>
<p><code>职业发展</code> <code>产品职业观</code></p>
<p>作者认为初中级产品经理要经历 5 个阶段：实现业务需求、挖掘产品需求、规划产品路径、架构产品模型、推进产品决策。高级产品经理：行业研究、市场洞察、商业模式、战略目标。</p>
<p><a href="https://www.woshipm.com/share/6005260.html">https://www.woshipm.com/share/6005260.html</a></p>
<p><code>职业发展</code></p>
<p>短期价值： 领导的信任、表扬、提成加薪</p>
<p>长期价值： 经验积累和综合素质提升</p>
<p>情绪价值： 获得成就感和外界的正向反馈，心情愉悦</p>
<h1 id="新关注-订阅"><a href="#新关注-订阅" class="headerlink" title="新关注&#x2F;订阅"></a>新关注&#x2F;订阅</h1><table>
<thead>
<tr>
<th>昵称</th>
<th>平台</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.woshipm.com/u/1290247">诺儿笔记本</a></td>
<td>人人都是产品经理</td>
</tr>
</tbody></table>
<hr>
<p><strong>更新记录</strong></p>
<ul>
<li>20240312：初稿</li>
</ul>
]]></content>
      <categories>
        <category>考拉周刊</category>
      </categories>
  </entry>
  <entry>
    <title>node包管理器</title>
    <url>/2024/2024092001/</url>
    <content><![CDATA[<p>npm 的服务器外国外，网速太慢了，换到国内的源速度快一点</p>
<span id="more"></span>

<p><code>npm</code>是<code>node package manager</code>的缩写，node.js 的包管理器</p>
<h2 id="1-nvm"><a href="#1-nvm" class="headerlink" title="1 nvm"></a>1 nvm</h2><p>node 版本管理器，<code>nvm</code>是<code>node version manager</code>的缩写</p>
<p><strong>安装</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用scoop查询是否用nvm</span></span><br><span class="line">scoop search nvm</span><br><span class="line"><span class="comment"># 使用scoop安装（挂梯子）</span></span><br><span class="line">scoop install nvm</span><br></pre></td></tr></table></figure>

<img src="/2024/2024092001/image-20240920135507406.png" class="" title="image-20240920135507406">

<h2 id="2-nrm"><a href="#2-nrm" class="headerlink" title="2 nrm"></a>2 nrm</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用淘宝镜像源全局安装 npm registry manager</span></span><br><span class="line">npm install nrm -g --registry=https://registry.npmmirror.com</span><br><span class="line"><span class="comment"># 查询有哪些npm源</span></span><br><span class="line">nrm <span class="built_in">ls</span></span><br><span class="line"><span class="comment"># 测试不同npm源的速度</span></span><br><span class="line">nrm <span class="built_in">test</span></span><br><span class="line"><span class="comment"># 切换npm源</span></span><br><span class="line">nrm use taobao</span><br><span class="line"><span class="comment"># 查看npm源是否切换成功</span></span><br><span class="line">npm config get registry</span><br></pre></td></tr></table></figure>

<h2 id="3-ncu"><a href="#3-ncu" class="headerlink" title="3 ncu"></a>3 ncu</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装ncu</span></span><br><span class="line">npm install -g npm-check-updates</span><br><span class="line"><span class="comment"># 检查package.json依赖包的最新版本</span></span><br><span class="line">ncu</span><br><span class="line"><span class="comment"># 将package.json依赖包版本号更新到最新</span></span><br><span class="line">ncu -u</span><br><span class="line"><span class="comment"># 根据package.json安装最新的依赖包</span></span><br><span class="line">npm i</span><br></pre></td></tr></table></figure>

<h2 id="4-npm-check"><a href="#4-npm-check" class="headerlink" title="4 npm-check"></a>4 npm-check</h2><p><code>npm-check</code> 可以帮助你检查项目中未使用的依赖、过时的依赖、以及可以更新的依赖</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 全局安装</span></span><br><span class="line">npm install -g npm-check</span><br><span class="line"><span class="comment"># 检查依赖包</span></span><br><span class="line">npm-check</span><br><span class="line"><span class="comment"># 全部更新</span></span><br><span class="line">npm-check -u</span><br><span class="line"><span class="comment"># 更新某一个</span></span><br><span class="line">npm-check -u &lt;package-name&gt;</span><br></pre></td></tr></table></figure>

<hr>
<p><strong>更新记录</strong></p>
<ul>
<li><p>20240921：增加<code>ncu</code> <code>npm-check</code>的内容</p>
</li>
<li><p>20240920：初稿</p>
</li>
</ul>
]]></content>
      <categories>
        <category>程序猿</category>
        <category>前端</category>
        <category>环境配置</category>
      </categories>
      <tags>
        <tag>包管理器</tag>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>远程仓库和远程分支更名</title>
    <url>/2024/2024102002/</url>
    <content><![CDATA[<p>远程仓库和远程分支更名，本地 git 操作记录</p>
<span id="more"></span>

<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>将远程仓库名称从<code>ombretor</code>更改为<code>aimee</code>，将远程分支从<code>main</code>改为<code>master</code></p>
<img src="/2024/2024102002/image-20241020192613150.png" class="" title="image-20241020192613150">

<h1 id="本地-git-操作"><a href="#本地-git-操作" class="headerlink" title="本地 git 操作"></a>本地 git 操作</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看所有远程仓库（详细模式）</span><br><span class="line">git remote --verbose</span><br><span class="line"># 更新远程仓库url</span><br><span class="line">git remote set-url origin https://gitee.com/koalamini/aimee.git</span><br><span class="line">git remote --verbose  # 检查是否更新成功</span><br><span class="line"># 修改远程仓库名称,origin改为gitee</span><br><span class="line">git remote rename origin gitee</span><br><span class="line">git remote --verbose  # 检查是否更新成功</span><br><span class="line"></span><br><span class="line"># 本地仓库，将main更名为master</span><br><span class="line">git branch  #检查当前分支名称</span><br><span class="line">git branch --move master</span><br><span class="line"># 推送到远程仓库(远程仓库新建master分支)</span><br><span class="line">git push gitee master</span><br><span class="line"># 远程仓库将master设为默认分支</span><br><span class="line">git push set-head gitee master</span><br><span class="line"># 设置跟踪关系</span><br><span class="line">git remote -u gitee master</span><br></pre></td></tr></table></figure>

<hr>
<p><strong>更新日志</strong></p>
<ul>
<li>20241020：初稿</li>
</ul>
]]></content>
      <categories>
        <category>程序猿</category>
        <category>git</category>
      </categories>
  </entry>
  <entry>
    <title>conda安装与使用</title>
    <url>/2025/conda%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>本地部署阿里的 SenseVoice 时发现，依赖于 ffmpeg 这种非 python 包，pip 没办法直接管理，但我又不想系统层面全局装，这时候发现 conda 可以实现代码项目层级的依赖包隔离。</p>
<span id="more"></span>

<h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1 安装"></a>1 安装</h2><h3 id="1-1-Mac-上安装"><a href="#1-1-Mac-上安装" class="headerlink" title="1.1 Mac 上安装"></a>1.1 Mac 上安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用homebrew安装</span></span><br><span class="line">brew install miniconda</span><br><span class="line"><span class="comment"># 检查是否安装成功</span></span><br><span class="line">conda --version</span><br></pre></td></tr></table></figure>

<h3 id="Windows-上安装"><a href="#Windows-上安装" class="headerlink" title="Windows 上安装"></a>Windows 上安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1 用winget安装</span></span><br><span class="line">winget install miniconda3</span><br><span class="line"><span class="comment"># 2 添加到环境变量，使得windows终端可识别conda命令</span></span><br><span class="line"><span class="comment"># 3 检查是否安装成功</span></span><br><span class="line">conda --version</span><br></pre></td></tr></table></figure>

<h2 id="2-使用"><a href="#2-使用" class="headerlink" title="2 使用"></a>2 使用</h2><h3 id="2-1-创建-conda-环境"><a href="#2-1-创建-conda-环境" class="headerlink" title="2.1 创建 conda 环境"></a>2.1 创建 conda 环境</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用配置文件创建conda环境</span></span><br><span class="line">conda <span class="built_in">env</span> create -f environment.yml</span><br><span class="line"><span class="comment"># 激活conda环境</span></span><br><span class="line">conda activate ai-env</span><br></pre></td></tr></table></figure>

<p>阿里 SenseVoice 和 CosyVoice 的依赖环境配置如下</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">ai-env</span></span><br><span class="line"><span class="attr">channels:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">conda-forge</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">defaults</span></span><br><span class="line"><span class="attr">dependencies:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">python=3.12</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">ffmpeg</span> <span class="comment"># 音频转码</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">pip</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">pip:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">flask</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">gunicorn</span> <span class="comment"># web容器</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">python-magic</span> <span class="comment"># 多媒体格式</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">pydub</span> <span class="comment"># 音频处理</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">modelscope</span> <span class="comment"># 魔搭社区-阿里</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">funasr</span> <span class="comment"># 语音识别-阿里</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">torch</span> <span class="comment"># Pytorch深度学习核心库</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">torchaudio</span> <span class="comment"># Pytorch框架音频处理</span></span><br></pre></td></tr></table></figure>

<p>其中的<code>channels</code>可以换成国内的 conda 镜像源：中科大、清华、阿里云</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">channels:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">https://mirrors.ustc.edu.cn/anaconda/pkgs/main/</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">https://mirrors.ustc.edu.cn/anaconda/pkgs/free/</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">https://mirrors.ustc.edu.cn/anaconda/cloud/conda-forge/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">channels:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">channels:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">https://mirrors.aliyun.com/anaconda/pkgs/main/</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">https://mirrors.aliyun.com/anaconda/pkgs/free/</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">https://mirrors.aliyun.com/anaconda/cloud/conda-forge/</span></span><br></pre></td></tr></table></figure>

<h3 id="2-2-新增-python-包"><a href="#2-2-新增-python-包" class="headerlink" title="2.2 新增 python 包"></a>2.2 新增 python 包</h3><p>在 conda 环境激活状态下，使用 pip 安装 python 依赖包，可以配置国内镜像源：中科大、清华、阿里云</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置中科大pip镜像源</span></span><br><span class="line">pip config <span class="built_in">set</span> global.index-url https://pypi.mirrors.ustc.edu.cn/simple</span><br><span class="line"><span class="comment"># 检查是否配置成功</span></span><br><span class="line">pip config list</span><br></pre></td></tr></table></figure>

<p>出现一下结果说明配置成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">global.index-url=<span class="string">&#x27;https://pypi.mirrors.ustc.edu.cn/simple&#x27;</span></span><br></pre></td></tr></table></figure>

<hr>
<p><strong>更新日志</strong></p>
<ul>
<li>20250111： 初稿</li>
</ul>
]]></content>
      <categories>
        <category>程序猿</category>
        <category>环境配置</category>
      </categories>
  </entry>
  <entry>
    <title>Git仓库命令</title>
    <url>/2024/git%E4%BB%93%E5%BA%93%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>git 仓库常用命令清单，包括<code>git init</code> <code>git clone</code> <code>git log</code></p>
<span id="more"></span>

<h2 id="1-git-init"><a href="#1-git-init" class="headerlink" title="1 git-init"></a>1 git-init</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建git仓库</span></span><br><span class="line">git init</span><br></pre></td></tr></table></figure>

<p>它会在当前目录下生成一个<code>.git</code>隐藏目录，表示本地仓库创建成功</p>
<h2 id="2-git-clone"><a href="#2-git-clone" class="headerlink" title="2 git-clone"></a>2 git-clone</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从远程仓库克隆所有分支</span></span><br><span class="line">git <span class="built_in">clone</span> &lt;remote-url&gt; [local-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从远程仓库克隆单分支</span></span><br><span class="line">git <span class="built_in">clone</span> -b &lt;remote-branch&gt; --single-branch &lt;remote-url&gt;</span><br></pre></td></tr></table></figure>

<h2 id="3-git-log"><a href="#3-git-log" class="headerlink" title="3 git-log"></a>3 git-log</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 以单行格式，查看仓库提交历史</span></span><br><span class="line">git <span class="built_in">log</span> --oneline</span><br></pre></td></tr></table></figure>




<hr>
<p><strong>参考资料</strong></p>
<ul>
<li><p><a href="https://git-scm.com/docs/git-init/zh_HANS-CN">git-init | git官网</a></p>
</li>
<li><p><a href="https://git-scm.com/docs/git-clone/zh_HANS-CN">git-clone | git官网</a></p>
</li>
</ul>
<p><strong>更新日志</strong></p>
<ul>
<li><p>20250315：初稿</p>
</li>
<li><p>20241218：创建</p>
</li>
</ul>
]]></content>
      <categories>
        <category>程序猿</category>
        <category>git</category>
      </categories>
  </entry>
  <entry>
    <title>Git分支命令</title>
    <url>/2024/git%E5%88%86%E6%94%AF%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>git 分支常用命令清单，包括<code>git branch</code> <code>git switch</code> <code>git merge</code></p>
<span id="more"></span>

<h2 id="1-git-branch"><a href="#1-git-branch" class="headerlink" title="1 git-branch"></a>1 git-branch</h2><h3 id="1-1-查询"><a href="#1-1-查询" class="headerlink" title="1.1 查询"></a>1.1 查询</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出本地仓库分支</span></span><br><span class="line">git branch</span><br><span class="line">git branch -l</span><br><span class="line">git branch --list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出远程仓库分支</span></span><br><span class="line">git branch -r</span><br><span class="line">git branch --remotes</span><br><span class="line">git branch -lr</span><br><span class="line">git branch --list --remotes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有分支</span></span><br><span class="line">git branch -a</span><br><span class="line">git branch --all</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询上游分支（远程分支），verbose是“详细的“意思</span></span><br><span class="line">git branch -vv</span><br><span class="line">git branch --verbose --verbose</span><br></pre></td></tr></table></figure>

<h3 id="1-2-创建与删除"><a href="#1-2-创建与删除" class="headerlink" title="1.2 创建与删除"></a>1.2 创建与删除</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建新分支</span></span><br><span class="line">git branch &lt;new-branch&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建新分支并追踪远程分支（上游分支）</span></span><br><span class="line">git branch --track &lt;new-local-branch&gt; &lt;remote-branch&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line">git branch -d &lt;branch&gt;</span><br><span class="line">git branch --delete &lt;branch&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强制删除分支</span></span><br><span class="line">git branch -D &lt;branch&gt;</span><br><span class="line">git branch --delete --force &lt;branch&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程分支追踪</span></span><br><span class="line">git branch -dr &lt;remote/branch&gt;</span><br><span class="line">git branch --delete --remote &lt;remote/branch&gt;</span><br><span class="line"><span class="comment"># 删除远程分支</span></span><br><span class="line">git push -d &lt;remote&gt; &lt;branch&gt;</span><br><span class="line">git push --delete &lt;remote&gt; &lt;branch&gt;</span><br></pre></td></tr></table></figure>

<h3 id="1-3-移动（重命名）与复制"><a href="#1-3-移动（重命名）与复制" class="headerlink" title="1.3 移动（重命名）与复制"></a>1.3 移动（重命名）与复制</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 移动（重命名）当前分支</span></span><br><span class="line">git branch -m [current-branch] &lt;new-branch&gt;</span><br><span class="line">git branch --move [current-branch] &lt;newbranch&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移动（重命名）指定分支</span></span><br><span class="line">git branch -m &lt;target-branch&gt; &lt;new-branch&gt;</span><br><span class="line">git branch --move &lt;target-branch&gt; &lt;new-branch&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制当前分支</span></span><br><span class="line">git branch -c &lt;new-branch&gt; [current-branch]</span><br><span class="line">git branch --copy &lt;new-branch&gt; [current-branch]</span><br></pre></td></tr></table></figure>

<h3 id="1-4-其他"><a href="#1-4-其他" class="headerlink" title="1.4 其他"></a>1.4 其他</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 当前分支追踪远程分支（上游分支）</span></span><br><span class="line">git branch -u &lt;remote-branch&gt;</span><br><span class="line">git branch --set-upstream-to=&lt;remote-branch&gt;</span><br></pre></td></tr></table></figure>

<h2 id="2-git-switch"><a href="#2-git-switch" class="headerlink" title="2 git-switch"></a>2 git-switch</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 切换到分支</span></span><br><span class="line">git switch &lt;target-branch&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到新分支（会创建新分支）</span></span><br><span class="line">git switch -c &lt;new-branch&gt;</span><br><span class="line">git switch --create &lt;new-branch&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到新孤立分支（没有父提交，空分支）</span></span><br><span class="line">git switch --orphan &lt;new-branch&gt;</span><br></pre></td></tr></table></figure>

<h2 id="3-git-merge"><a href="#3-git-merge" class="headerlink" title="3 git-merge"></a>3 git-merge</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 合并指定分支到当前分支</span></span><br><span class="line">git merge &lt;target-branch&gt;</span><br></pre></td></tr></table></figure>

<hr>
<p><strong>参考资料</strong></p>
<ul>
<li><p><a href="https://git-scm.com/docs/git-branch/zh_HANS-CN">git-branch | git 官网</a></p>
</li>
<li><p><a href="https://git-scm.com/docs/git-switch/zh_HANS-CN">git-switch | git 官网</a></p>
</li>
<li><p><a href="https://git-scm.com/docs/git-merge/zh_HANS-CN">git-merge | git 官网</a></p>
</li>
</ul>
<p><strong>更新日志</strong></p>
<ul>
<li><p>20241229：初稿</p>
</li>
<li><p>20241217：创建</p>
</li>
</ul>
]]></content>
      <categories>
        <category>程序猿</category>
        <category>git</category>
      </categories>
  </entry>
  <entry>
    <title>Git分支实践</title>
    <url>/2024/git%E5%88%86%E6%94%AF%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<p>包括追踪远程分支、重命名远程分支、处理偏离分支</p>
<span id="more"></span>

<h2 id="1-追踪远程分支"><a href="#1-追踪远程分支" class="headerlink" title="1 追踪远程分支"></a>1 追踪远程分支</h2><h3 id="1-1-使用场景"><a href="#1-1-使用场景" class="headerlink" title="1.1 使用场景"></a>1.1 使用场景</h3><p>远程分支树如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 -- 2 --3 -- 7 -- 8  master</span><br><span class="line">          \</span><br><span class="line">           4 -- 5 -- 6  feat</span><br></pre></td></tr></table></figure>

<p>本地分支树如下（没有 feat 分支）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 -- 2 --3 -- 7 -- 8 -- 9 -- 10 master</span><br></pre></td></tr></table></figure>

<h3 id="1-2-处理流程"><a href="#1-2-处理流程" class="headerlink" title="1.2 处理流程"></a>1.2 处理流程</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建feat本地分支，并追踪远程分支</span></span><br><span class="line">git branch --track feat origin/feat</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查是否追踪成功</span></span><br><span class="line">git branch -vv</span><br></pre></td></tr></table></figure>

<h2 id="2-重命名远程分支"><a href="#2-重命名远程分支" class="headerlink" title="2 重命名远程分支"></a>2 重命名远程分支</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 删除远程分支</span></span><br><span class="line">git push origin --delete &lt;old-branch&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 重命名本地分支</span></span><br><span class="line">git branch -m &lt;old-branch&gt; &lt;new-branch&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 推送重命名后的本地分支</span></span><br><span class="line">git push origin &lt;new-branch&gt;</span><br></pre></td></tr></table></figure>

<h2 id="3-处理偏离分支"><a href="#3-处理偏离分支" class="headerlink" title="3 处理偏离分支"></a>3 处理偏离分支</h2><h3 id="3-1-使用场景"><a href="#3-1-使用场景" class="headerlink" title="3.1 使用场景"></a>3.1 使用场景</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 -- 2 -- 3 -- 6 -- 7  origin/master</span><br><span class="line">           \</span><br><span class="line">            4 -- 5  master</span><br></pre></td></tr></table></figure>

<p>这种情况下会出现<code>致命错误：需要指定如何调和偏离的分支</code>提示，如下图所示：</p>
<img src="/2024/git%E5%88%86%E6%94%AF%E5%AE%9E%E8%B7%B5/image-20241020181440543.png" class="" title="image-20241020181440543">

<h3 id="3-2-如何处理"><a href="#3-2-如何处理" class="headerlink" title="3.2 如何处理"></a>3.2 如何处理</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git pull --rebase &amp;&amp; git push</span><br></pre></td></tr></table></figure>

<p>执行完<code>git pull --rebase</code>后本地<code>master</code>分支提交记录如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 -- 2 -- 3 -- 6 -- 7 -- 4&#x27; -- 5&#x27;</span><br></pre></td></tr></table></figure>

<p>删除 4 和 5 commit，创建 4’ 和 5’ commit，拼接到 7 后面</p>
<hr>
<p><strong>更新日志</strong></p>
<ul>
<li><p>20241229：初稿</p>
</li>
<li><p>20241218：创建</p>
</li>
</ul>
]]></content>
      <categories>
        <category>程序猿</category>
        <category>git</category>
      </categories>
  </entry>
  <entry>
    <title>git概念</title>
    <url>/2021/git%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<p>git 重要的术语概念</p>
<span id="more"></span>

<h1 id="术语概念"><a href="#术语概念" class="headerlink" title="术语概念"></a>术语概念</h1><img src="/2021/git%E6%A6%82%E5%BF%B5/bg2015120901.png" class="" title="bg2015120901">

<table>
<thead>
<tr>
<th>英文</th>
<th>中文</th>
</tr>
</thead>
<tbody><tr>
<td>remote</td>
<td>远程仓库</td>
</tr>
<tr>
<td>repository</td>
<td>本地仓库</td>
</tr>
<tr>
<td>branch</td>
<td>分支</td>
</tr>
<tr>
<td>index&#x2F;stage&#x2F;cache</td>
<td>索引区&#x2F;暂存区&#x2F;缓存区</td>
</tr>
<tr>
<td>workspace</td>
<td>工作区</td>
</tr>
<tr>
<td>stash</td>
<td>贮藏区</td>
</tr>
<tr>
<td>tag</td>
<td>标签</td>
</tr>
</tbody></table>
<h1 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h1><pre>
<code class="mermaid">
sequenceDiagram
participant workspace
participant stage
participant stash
participant repository
participant remote

par 创建仓库
note over repository: git init
remote -&gt;&gt; repository: git clone
repository -&gt;&gt; workspace: git switch
and 提交修改
workspace -&gt;&gt; stage: git add
stage -&gt;&gt; repository: git commit
repository -&gt;&gt; remote: git push
and 拉取更新
remote -&gt;&gt; repository: git fetch
repository -&gt;&gt; workspace: git merge&#x2F;rebase
remote -&gt;&gt; workspace: git pull
and 撤销修改
stage -&gt;&gt; workspace: git restore&#x2F;reset
stage -&gt;&gt; stash: git stash
repository -&gt;&gt; stage: git reset&#x2F;revert
repository -&gt;&gt; repository: git rebase
end
</code>
</pre>

<hr>
<p><strong>参考资料</strong></p>
<ul>
<li><a href="https://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html">常用 Git 命令清单 | 阮一峰网络日志</a></li>
</ul>
<p><strong>更新日志</strong></p>
<ul>
<li><p>20241217：增加阮一峰那经典的流程图，优化展现形式</p>
</li>
<li><p>20241021：时序图增加英文</p>
</li>
<li><p>20211227：初稿</p>
</li>
</ul>
]]></content>
      <categories>
        <category>程序猿</category>
        <category>git</category>
      </categories>
  </entry>
  <entry>
    <title>Git配置</title>
    <url>/2024/git%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>git 配置 <code>git config</code> 命令，<code>.gitignore</code> 配置文件语法</p>
<span id="more"></span>


<h1 id="1-git-config"><a href="#1-git-config" class="headerlink" title="1 git config"></a>1 git config</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置用户名和邮箱</span></span><br><span class="line">git config --global user.name <span class="string">&quot;koalamini&quot;</span></span><br><span class="line">git config --global user.email koalamini@qq.com</span><br><span class="line"><span class="comment"># 取消转义，解决中文乱码问题</span></span><br><span class="line">git config --global core.quotepath <span class="literal">false</span></span><br><span class="line"><span class="comment"># 将VS Code设为默认编辑器</span></span><br><span class="line">git config --global core.editor <span class="string">&quot;code --wait&quot;</span></span><br><span class="line"><span class="comment"># 创建别名缩写</span></span><br><span class="line">git config --global alias.st status</span><br></pre></td></tr></table></figure>

<img src="/2024/git%E9%85%8D%E7%BD%AE/PixPin_2024-10-23_19-45-05.png" class="" title="中文乱码问题">

<h1 id="2-gitignore配置文件"><a href="#2-gitignore配置文件" class="headerlink" title="2 .gitignore配置文件"></a>2 .gitignore配置文件</h1><p>将需要忽略不跟踪的文件夹和文件配置进去</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 忽略.docx</span></span><br><span class="line">*.docx</span><br><span class="line"><span class="comment"># 忽略mydata路径下的所有文件和文件夹</span></span><br><span class="line">mydata/**</span><br></pre></td></tr></table></figure>
<hr>
<ul>
<li>20250315：初稿</li>
<li>20241218：创建</li>
</ul>
]]></content>
      <categories>
        <category>程序猿</category>
        <category>git</category>
      </categories>
  </entry>
  <entry>
    <title>pip配置国内镜像源</title>
    <url>/2025/pip%E9%85%8D%E7%BD%AE%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F%E6%BA%90/</url>
    <content><![CDATA[<p>使用国内的中科大、清华大学、阿里云的pip镜像源速度快太多了</p>
<span id="more"></span>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置中科大pip镜像源</span></span><br><span class="line">pip config <span class="built_in">set</span> global.index-url https://pypi.mirrors.ustc.edu.cn/simple</span><br><span class="line"><span class="comment"># 配置清华大学pip镜像源</span></span><br><span class="line">pip config <span class="built_in">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line"><span class="comment"># 配置阿里云pip镜像源</span></span><br><span class="line">pip config <span class="built_in">set</span> global.index-url https://mirrors.aliyun.com/pypi/simple/</span><br><span class="line"><span class="comment"># 检查是否配置成功</span></span><br><span class="line">pip config list</span><br><span class="line"><span class="comment"># 取消配置</span></span><br><span class="line">pip config <span class="built_in">unset</span> global.index-url</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<p><strong>更新日志</strong></p>
<ul>
<li>20250206：初稿</li>
</ul>
]]></content>
      <categories>
        <category>程序猿</category>
        <category>环境配置</category>
      </categories>
      <tags>
        <tag>包管理器</tag>
        <tag>pip</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>博客搭建1-安装</title>
    <url>/2021/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA1/</url>
    <content><![CDATA[<p>大学的时候用的是博客园，毕业后打算自己搭一个，选择 Hexo+NexT</p>
<span id="more"></span>

<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ul>
<li>下载安装<a href="https://nodejs.org/en/">NodeJs</a></li>
<li>在要存储位置打开 cmd</li>
<li>命令行输入<code>npm install -g hexo-cli</code> 安装 hexo 脚手架</li>
<li>命令行输入 <code>hexo init &lt;blog-name&gt;</code> 初始化站点，博客名称必填<img src="/2021/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA1/Snipaste_2021-07-07_23-02-09.jpg" class=""></li>
<li>命令行输入 <code>cd &lt;blog-name&gt;</code> 进入博客文件夹</li>
<li>命令行输入 <code>hexo server</code> 本地打开博客网站，浏览器打开<code>http://localhost:4000</code>，缩写为<code>hexo s</code><img src="/2021/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA1/Snipaste_2021-07-07_23-12-29.jpg" class="">
<img src="/2021/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA1/Snipaste_2021-07-07_23-14-36.jpg" class=""></li>
</ul>
<h1 id="Github-托管部署"><a href="#Github-托管部署" class="headerlink" title="Github 托管部署"></a>Github 托管部署</h1><ul>
<li>命令行输入 <code>npm install hexo-deployer-git</code> 安装 git 部署工具</li>
<li>打开<a href="https://github.com/">github</a>，新建仓库，注意仓库名称要以<code>.github.io</code>结尾<img src="/2021/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA1/Snipaste_2021-07-07_23-35-48.jpg" class=""></li>
<li>在<em>github</em> 个人设置中生成<em>token</em><img src="/2021/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA1/Snipaste_2021-07-07_23-55-53.jpg" class="">
<img src="/2021/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA1/Snipaste_2021-07-07_23-56-57.jpg" class=""></li>
<li>打开<strong>站点配置文档</strong> __config.yml_，搜索<em>deploy</em><img src="/2021/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA1/Snipaste_2021-07-08_00-04-07.jpg" class=""></li>
<li>命令行输入 <code>hexo deploy</code> 部署到 github 仓库，缩写为<code>hexo d</code></li>
<li>浏览器打开博客网址，例如：<a href="https://koalamini.github.io/">https://koalamini.github.io/</a></li>
</ul>
<h1 id="多设备写博客"><a href="#多设备写博客" class="headerlink" title="多设备写博客"></a>多设备写博客</h1><ul>
<li>在<a href="https://gitee.com/">Gitee</a>或者<a href="https://github.com/">Github</a>新建<strong>私有仓库</strong></li>
<li>使用 Git 工具同步，这样就可以多端同步写博客了</li>
</ul>
<hr>
<p><strong>参考资料</strong></p>
<ul>
<li><a href="https://hexo.io/zh-cn/index.html">Hexo 官方</a></li>
<li><a href="http://theme-next.iissnan.com/">NexT 中文网</a></li>
<li><a href="https://github.com/next-theme/hexo-theme-next">GitHub - next-theme</a></li>
<li><a href="https://blog.csdn.net/as480133937/article/details/100138838">Z 小旋. Hexo-Next 主题博客个性化配置超详细，超全面(两万字). CSDN 博客</a></li>
</ul>
<p><strong>更新日志</strong></p>
<ul>
<li><p>2024-09-16：删除 Coding 的部署方式，删除配置模板，删除 next 配置部分</p>
</li>
<li><p>2021-07-08：初稿</p>
</li>
</ul>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
  </entry>
  <entry>
    <title>博客搭建2-站点配置</title>
    <url>/2021/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA2/</url>
    <content><![CDATA[<p>搜索相关的功能配置</p>
<span id="more"></span>

<h1 id="本地搜索"><a href="#本地搜索" class="headerlink" title="本地搜索"></a>本地搜索</h1><ul>
<li>命令行输入<code>npm install hexo-generator-searchdb</code>，安装<strong>搜索</strong>工具</li>
<li>在<strong>站点配置文档</strong> __config.yml_，新增内容</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">content:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br></pre></td></tr></table></figure>

<ul>
<li>在<strong>主题配置文档</strong> __config.yml_，搜索<em>local_search</em>，将子属性<em>enable</em>的值改为<code>true</code><img src="/2021/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA2/image-20210711173129363.png" class="" title="image-20210711173129363"></li>
</ul>
<h1 id="网站地图"><a href="#网站地图" class="headerlink" title="网站地图"></a>网站地图</h1><p>网站地图是方便搜索引擎爬虫了解网站结构，提高网站曝光度。</p>
<ul>
<li><p>在<strong>站点配置文档</strong> __config.yml_，搜索<code>url</code>，后面的值设置为你的网站 url，例如<code>https://koalamini.github.io</code></p>
</li>
<li><p>命令行输入 <code>npm install hexo-generator-sitemap</code> 安装网站地图生成插件</p>
</li>
<li><p>打开<a href="https://ziyuan.baidu.com/">百度搜索资源平台</a>，【菜单栏】→【用户中心】→【站点管理】→【添加站点】</p>
<img src="/2021/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA2/Snipaste_2021-07-08_01-12-00.jpg" class=""></li>
<li><p>打开<strong>主题配置文档</strong> __config.yml_，搜索<em>index_with_subtitle</em>，将后面的值改为<code>true</code></p>
</li>
<li><p>打开<strong>主题配置文档</strong> __config.yml_，搜索<em>baidu</em></p>
<img src="/2021/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA2/Snipaste_2021-07-08_01-15-50.jpg" class="">
</li>
<li><p>返回百度站点验证网页，点击【完成验证】</p>
<img src="/2021/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA2/Snipaste_2021-07-08_01-41-44.jpg" class="">
</li>
<li><p>网站地图提交收录</p>
<img src="/2021/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA2/Snipaste_2021-07-11_13-53-33.jpg" class="">
</li>
<li><p>API 提交收录</p>
<img src="/2021/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA2/Snipaste_2021-07-11_14-39-58.jpg" class="">
<img src="/2021/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA2/Snipaste_2021-07-11_14-42-27.jpg" class="" title="Snipaste_2021-07-11_14-42-27"></li>
</ul>
<hr>
<p><strong>更新日志</strong></p>
<ul>
<li><p>2024-09-16：内容改为搜索功能相关的内容，非搜索功能的清理出去</p>
</li>
<li><p>2021-07-20：初稿</p>
</li>
</ul>
<hr>
<p><strong>浏览进度</strong></p>
<ul>
<li>在<strong>主题配置文档</strong> __config.yml_，搜索<code>scrollpercent</code>，值改为<code>true</code>，效果为：<img src="/2021/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA2/image-20210711171652479.png" class="" title="image-20210711171652479"></li>
</ul>
<p><strong>置顶文章</strong></p>
<ul>
<li>命令行输入 <code>npm uninstall hexo-generator-index</code> 卸载默认插件</li>
<li>命令行输入 <code>npm install hexo-generator-index-pin-top</code> 安装新插件</li>
<li>修改模板，修改<code>scaffolds\post.md</code>，在文章<strong>元信息</strong>区（Front-matter）添加<code>top: false</code>，撰写文章时改为<code>true</code>即可</li>
</ul>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
  </entry>
  <entry>
    <title>博客搭建3-安装Next主题</title>
    <url>/2022/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA3/</url>
    <content><![CDATA[<p>很喜欢简洁朴素干净的 next 主题</p>
<span id="more"></span>

<blockquote>
<p>适用于 hexo 5.0 以上版本</p>
</blockquote>
<h1 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h1><p>有三种方式安装：下载<a href="https://github.com/next-theme/hexo-theme-next">源码</a>、npm、git，推荐使用 git 方式</p>
<p><strong>git 方式</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换到博客站点根目录</span></span><br><span class="line">cd hexo-site</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装next主题到themes文件夹内，并更名为next</span></span><br><span class="line">git clone https://github.com/next-theme/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>

<p>将<code>themes/next/_config.yml</code>文件拷贝到博客站点根目录下，更名为<code>_config.next.yml</code></p>
<h1 id="站点配置-Hexo-配置"><a href="#站点配置-Hexo-配置" class="headerlink" title="站点配置(Hexo 配置)"></a>站点配置(Hexo 配置)</h1><p>打开站点的<code>_config.yml</code>，找到<code>Extensions</code>块，修改主题为<code>next</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Extensions（拓展）</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="comment"># theme: landscape # 默认主题</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure>

<h1 id="主题配置（Next-主题配置）"><a href="#主题配置（Next-主题配置）" class="headerlink" title="主题配置（Next 主题配置）"></a>主题配置（Next 主题配置）</h1><blockquote>
<p>站点根目录下的<code>_config.next.yml</code>文件</p>
</blockquote>
<h2 id="3-1-配置分类和标签页面"><a href="#3-1-配置分类和标签页面" class="headerlink" title="3.1 配置分类和标签页面"></a>3.1 配置分类和标签页面</h2><p>命令行输入 <code>hexo n page 标签</code> 新建 tags 页面，会在<code>source</code>文件夹下生成<code>tags</code>文件夹，会使用<code>scaffolds</code>文件夹下的<em>page</em>模板在<code>tags</code>文件夹下生成<em>index.md</em>文件</p>
<p>打开<code>tags\index.md</code>，添加<code>type: tags</code></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: 2021-07-08 08:27:38</span><br><span class="line"><span class="section">type: tags</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>

<p>命令行输入 <code>hexo n page 分类</code> 新建 categores 页面，会在<code>source</code>文件夹下生成<code>categories</code>文件夹，会使用<code>scaffolds</code>文件夹下的<em>page</em>模板在<code>categories</code>文件夹下生成<em>index.md</em>文件</p>
<p>打开<code>tags\index.md</code>，添加<code>type: categories</code></p>
<h2 id="导航栏配置"><a href="#导航栏配置" class="headerlink" title="导航栏配置"></a>导航栏配置</h2><img src="/2022/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA3/Snipaste_2021-07-08_00-59-30.jpg" class="">

<h1 id="测试浏览"><a href="#测试浏览" class="headerlink" title="测试浏览"></a>测试浏览</h1><p>运行<code>hexo s</code>，浏览器<code>http://localhost:4000</code>查看是否生效</p>
<hr>
<p><strong>参考资料</strong></p>
<ul>
<li><a href="https://github.com/next-theme/hexo-theme-next/tree/master/docs/zh-CN">https://github.com/next-theme/hexo-theme-next/tree/master/docs/zh-CN</a></li>
<li><a href="https://theme-next.js.org/docs/getting-started/">https://theme-next.js.org/docs/getting-started/</a></li>
</ul>
<p><strong>更新日志</strong></p>
<ul>
<li>20240916：增加分类和标签页面的配置说明，</li>
<li>20240303：精简主题安装的操作，推荐使用 git 方式安装</li>
<li>20220410：初稿</li>
</ul>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
  </entry>
  <entry>
    <title>博客搭建4-插入本地图片</title>
    <url>/2024/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA4/</url>
    <content><![CDATA[<p>hexo 本地图片的<a href="https://hexo.io/zh-cn/docs/asset-folders">解决方案</a>不够优雅，选用<code>hexo-image-link</code>插件，终于可以用 typora 优雅写博客了</p>
<span id="more"></span>

<h1 id="安装与配置"><a href="#安装与配置" class="headerlink" title="安装与配置"></a>安装与配置</h1><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p><code>npm install hero-image-link</code>安装插件，发现最新的版本是<code>0.0.6</code></p>
<h2 id="打开-hexo-配置"><a href="#打开-hexo-配置" class="headerlink" title="打开 hexo 配置"></a>打开 hexo 配置</h2><p>在博客根路径下找到<code>_config.yml</code>文件，找到<code>Writing</code>板块，将<code>post_asset_folder</code>配置改为<code>true</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Writing (编辑)</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>这个配置打开后，使用<code>hexo new &lt;博客名称&gt;</code>时会自动创建同名的文件夹，用来存放图片</p>
<h2 id="typora-配置"><a href="#typora-配置" class="headerlink" title="typora 配置"></a>typora 配置</h2><p>打开 typora 设置，配置成如图所示</p>
<img src="/2024/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA4/image-20240303115738031.png" class="" title="image-20240303115738031">

<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><ul>
<li>用<code>hexo n &lt;博客名称&gt;</code>创建新博客，这个命令它会套用<code>博客站点根目录/scaffolds/post.md</code>模板，并且生成同名的文件夹</li>
<li>用 typora 编写博客，并粘贴图片</li>
<li>用<code>hexo server</code>或者<code>hexo s</code>预览文章，检查图片是否正常显示</li>
<li>用<code>hexo generate</code>或者<code>hexo g</code>生成静态网页</li>
<li>用<code>hexo deploy</code>或者<code>hexo d</code>部署到 github 或者 gitee 博客站点托管网站</li>
<li>打开 <code>http://&lt;子域名&gt;.github.io</code>检查图片是否正常显示</li>
</ul>
<hr>
<p><strong>参考资料</strong></p>
<ul>
<li><a href="https://github.com/cocowool/hexo-image-link">https://github.com/cocowool/hexo-image-link</a></li>
<li><a href="http://edulinks.cn/2020/03/14/20200314-write-hexo-with-typora/">http://edulinks.cn/2020/03/14/20200314-write-hexo-with-typora/</a></li>
</ul>
<p><strong>更新日志</strong></p>
<ul>
<li>2024-03-03： 新建</li>
</ul>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
  </entry>
  <entry>
    <title>博客搭建5-功能清单</title>
    <url>/2024/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA5/</url>
    <content><![CDATA[<p>基本上全是参考官方博客的，有一些提供了最佳实践记录</p>
<span id="more"></span>

<h1 id="排版"><a href="#排版" class="headerlink" title="排版"></a>排版</h1><table>
<thead>
<tr>
<th>功能</th>
<th>参考</th>
</tr>
</thead>
<tbody><tr>
<td>文本高亮</td>
<td><a href="https://theme-next.js.org/docs/tag-plugins/label">label</a></td>
</tr>
<tr>
<td>高亮文本块</td>
<td><a href="https://theme-next.js.org/docs/tag-plugins/note">note</a></td>
</tr>
<tr>
<td>标签页</td>
<td><a href="https://theme-next.js.org/docs/tag-plugins/tabs">tabs</a></td>
</tr>
</tbody></table>
<h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><table>
<thead>
<tr>
<th>功能</th>
<th>参考</th>
<th>最佳实践</th>
</tr>
</thead>
<tbody><tr>
<td>本地相对路径图片</td>
<td><a href="https://github.com/cocowool/hexo-image-link">hexo-image-link</a></td>
<td><a href="/2024/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA4/" title="博客搭建4-插入本地图片">博客搭建4-插入本地图片</a></td>
</tr>
<tr>
<td>图片点击预览放大</td>
<td><a href="https://theme-next.js.org/docs/third-party-services/external-libraries#Fancybox">Fancybox</a><br /><a href="https://theme-next.js.org/docs/third-party-services/external-libraries#Medium-Zoom">Medium-Zoom</a></td>
<td>选择的 Medium-Zoom</td>
</tr>
</tbody></table>
<h1 id="统计"><a href="#统计" class="headerlink" title="统计"></a>统计</h1><table>
<thead>
<tr>
<th><strong>功能</strong></th>
<th><strong>参考</strong></th>
</tr>
</thead>
<tbody><tr>
<td>站点访问量浏览量统计</td>
<td><a href="https://theme-next.js.org/docs/third-party-services/statistics-and-analytics#Busuanzi-Counting-China">卜算子</a></td>
</tr>
<tr>
<td>文章浏览量统计、文章评论</td>
<td><a href="https://github.com/next-theme/hexo-next-valine">valine</a></td>
</tr>
<tr>
<td>百度统计</td>
<td><a href="https://theme-next.js.org/docs/third-party-services/statistics-and-analytics#Baidu-Analytics-China">Baidu-Analytics-China</a></td>
</tr>
<tr>
<td>微软统计</td>
<td><a href="https://theme-next.js.org/docs/third-party-services/statistics-and-analytics#Microsoft-Clarity-Analytics">Microsoft Clarity Analytics</a></td>
</tr>
<tr>
<td>谷歌统计</td>
<td><a href="https://theme-next.js.org/docs/third-party-services/statistics-and-analytics#Google-Analytics">Google Analytics</a></td>
</tr>
</tbody></table>
<h1 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h1><table>
<thead>
<tr>
<th>功能</th>
<th>参考</th>
</tr>
</thead>
<tbody><tr>
<td>本地搜索</td>
<td><a href="https://theme-next.js.org/docs/third-party-services/search-services#Local-Search">Local-Search</a></td>
</tr>
<tr>
<td>sitemap 生成</td>
<td><a href="https://github.com/hexojs/hexo-generator-sitemap">hexo-generator</a></td>
</tr>
<tr>
<td>谷歌 SEO 收录验证</td>
<td><a href="https://theme-next.js.org/docs/theme-settings/seo.html?highlight=seo#Google-Webmaster-Tools">Google-Webmaster-Tools</a></td>
</tr>
</tbody></table>
<blockquote>
<p>本博客托管在 github 上，由于 github 禁止百度爬虫，所以百度无法收录</p>
</blockquote>
<h1 id="5-互动"><a href="#5-互动" class="headerlink" title="5 互动"></a>5 互动</h1><table>
<thead>
<tr>
<th>功能</th>
<th>参考</th>
</tr>
</thead>
<tbody><tr>
<td>评论</td>
<td><a href="https://github.com/next-theme/hexo-next-valine">valine</a></td>
</tr>
<tr>
<td>即时聊天</td>
<td><a href="https://theme-next.js.org/docs/third-party-services/chat-services#Chatra">Chatra</a></td>
</tr>
</tbody></table>
<h1 id="6-其他"><a href="#6-其他" class="headerlink" title="6 其他"></a>6 其他</h1><table>
<thead>
<tr>
<th>功能</th>
<th>参考</th>
</tr>
</thead>
<tbody><tr>
<td>博客加密</td>
<td><a href="https://github.com/D0n9X1n/hexo-blog-encrypt">hexo-blog-encrypt</a></td>
</tr>
<tr>
<td>导航卡片</td>
<td><a href="https://theme-next.js.org/docs/tag-plugins/link-grid">link-grid</a></td>
</tr>
<tr>
<td>隐藏文章</td>
<td><a href="https://github.com/prinsss/hexo-hide-posts/">hexo-hide-posts</a></td>
</tr>
</tbody></table>
<hr>
<p><strong>更新日志</strong></p>
<ul>
<li>20240921：增加微软和谷歌分析，增加 hexo-hide-posts</li>
<li>20240720：增加了一些功能</li>
<li>20240427：初稿</li>
</ul>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
  </entry>
  <entry>
    <title>博客搭建6-自定义域名</title>
    <url>/2024/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA6/</url>
    <content><![CDATA[<p>使用<code>blog.koalamini.world</code>作为博客的域名</p>
<span id="more"></span>

<h1 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h1><p>添加<code>CNAME</code>解析，主机名填<code>blog</code></p>
<img src="/2024/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA6/image-20240427135756010.png" class="" title="image-20240427135756010">

<h1 id="博客配置"><a href="#博客配置" class="headerlink" title="博客配置"></a>博客配置</h1><p>在<code>/source</code>路径下添加<code>CNAME</code>文件，注意<u>没有文件拓展名</u>，然后在里面添加<code>blog.koalamini.world</code></p>
<p>最后，<code>hexo g</code>后部署到 github</p>
<hr>
<p><strong>更新日志</strong></p>
<ul>
<li>20240427：初稿</li>
</ul>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
  </entry>
  <entry>
    <title>关于这里</title>
    <url>/about/index.html</url>
    <content><![CDATA[<p>这里是我在数字世界的自留地，可以看作在互联网上的房子，我亲手建设它，像《雪崩》主角阿宏一样，我也会经常对它进行装修。</p>
<p>大学期间是在博客园写博客的，毕业后决定自己搭一个，选了Hexo+Next，转产品后停了一段时间，后来重新回到这里。</p>
<hr>
<p><strong>更新记录</strong></p>
<ul>
<li>20240921： <mark class="label primary">v1.5.1</mark>，新增 hexo-hide-posts 插件，把写给朋友的信件隐藏起来；显示ICP备案号</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>分类</title>
    <url>/categories/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>山山的收信箱</title>
    <url>/cuishan/index.html</url>
    <content><![CDATA[<p><a href="./happy2025.html">2024年生日快乐</a></p>
<!-- flag of hidden posts -->]]></content>
  </entry>
  <entry>
    <title>2025年生日快乐</title>
    <url>/cuishan/happy2025.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="c4196fb8c0d78dbf5f5d1a4186c2dc67e81eea85cd2f728c2afbbaf189c978e9">d7c16444b9cab1f20a63ca6bc4de76792712861d127b177f36e6b872757b15f084eeca95c7165457a8d40b0d149d24e37644f037639f892c3d6c6616be07b2797dc55b07a6585b9120f833e3efddd4be59588c0a3c5ee63c0ac0e10749c23f11c105a7a3f8eab6f37c7fe386c9a630565284df36feebcccf9e49c2c40765f5249f7f5c0b766d354b7fed71a45688296682dd46904fedd21d9d30d679cc6a00eafd33c53a82094de01b01ce85aa86cdf72c0340a2cc3e2859b50a65414aee83d94a953137d33c827167e379cec3c1a64e0ec0ccbc985525c7697a83105b7eb16ee32c709099d389b33b1db8d73c97382e1621e6f67c6a12db204773a90e899ca67a1de72b64c07de9a33cfbfc82891b51f714c1a3878b88d479a789e7309e9080f5dd92547d38115fc18da66f89b23efc8e38d35f8b09b7c32be59c5a53e6525e906b734901cb39bf0c0b052334fee1db77a3a87374c88281740e10d9b01ae77c10810137ef5b740983d4918a644f152dac5b33b95a4c3faedbd4a1c9ed96795816cd3c6d979d4fcd51e30bbf51b9c3d7a54660d78868d04ed03dd3e2d1180baf7ae2cfa509294e5d906b329ac0451fabd955cd744a6d24e7e66e9ced54d1db2fbcc8f89750e3b77ff3989fa2811fee1be1a41e0c5146f1f51619f20f7e519883061c9ab8321397c16a6cd8304bdb866a2343affd5e73ef36702dd8ba054fd18a3a8edc342c9c3cbc404a4719df4f216549d7574ac0733dfc0fbd27044886323c30d5a52f479426802be6d09b4cb7c25e8ede44bbcf4a81c49282831df1688f37ab1a051b77e4b1e9e08dafa9689bfd653205cc7a5e984eef0569d6104b69c82bd3f469a210dba6f250d75f8fc421974752e37ab1e8a3930eec8b06736b1a9372eaecc2895375ee7f705fbe0fc62a95b93ca5ed68d5e31f43a62eb92d00f6c65682be69e8b129401b59e80d3dec2ff55073018bd67e45c5bc555abf61ae571843d5990764b00c6ea9d0fc7998f644db5708f83fbd675b01eb97f1f211699289c670faa82d90602320a3a9ebe53214e8f23fd5e350e572ce2900bdbd6401e700a309e5ed0909bcd73e75edf57580a566d13121c698bd37729cf95f30b22629c9e9d5cf29865578775e1e8a1ea6f656c136ad644391056f07a956d0eed11a97b208ef52f4b14af2781ffd18b2feef67931e286d5d451d63caf2ce0428b78cd88c192bc0447110f514a5af22b21187b29cc9cd2400a2a7050296c260e281fb6b4042b71f4531d705bf86ead0312aaad5500e5495bb2278440080e2e4557eec1df5babca738a927cb6e062b55fb67a249c049656de57898bb029f233cd41ad249553eb7b79b9033fa5b6e7e3571d2c7c4bb56a9af95f7c84f91cf5909e66684d77fab2209da96d3e8bbdfa11f7a09aaeefd7bd9c82a93fa93509e81f991365b605b772b2de68eb00dd73496bd08eb389ecd379d00edb9eef469fa2642d7c876ef1433872f8de9fb2d8308ae414291dd3a9732fd4114a9388b5dcb73c87d75b3a3b790af3e4648d7146bc34089b3f891ff89940a743fba313935963b635180b2e253b38cc4c7725b72e81905658dbb31b6e3019892040de8723989a7c88ac50483eed34e4208eca448a115247d576c649eb9f3836fa0725dac3ce087732ae708e2aecfa8ebefa5e7548acfe1083825ea530e9e0c8a9b02b418bab25c00919f20eedc8204435112907b61ee87c875dbe98dc9dececc652400616d8d5d5abebc772c2f5b0e2204bb5fbd661ff20ef0cf9cbf31ebe754372f8d50b773e5d83e45f754dad988625437b200b054532669bfb12b50b08c97b71eb2e1bc61154289aef8e51f74acb5dbf2b597dc858bbc874f8b11b3783cc920d729ebb1ad99a76d3714ea37eaecc5a79ad3bbdc38b5ebe023b62795b0b1163df0806de8fd4be7b42f99503370044a3f16c31eeaa8da685ccbd7ac5ec74858f762faf92faba50db778f5d6a83dc1a476f934d738927d5242068b557336edf370fdca26985f6d4f9bbd0cce272cfdc6e3d08df215902b2840900ba4abe4e82764852242a5a8c5e0d333e23f00780d4d385d44e713eba3d46fcc212a6e704645f685401cbb053c0cb59e99817e27b2e3c218715c48baee95effe814a219fc4c7f2e4c2a66bb56f6a981d35d9f7eeb29dc81a5d8b3851ce3f71a2de9a82dcb880eadcab1c4393741d91a0fb71270a7c0adb38bec6eaec42060990688081a4a4414314e5c7ee55ecbb17b5b242ee467930c7bb59399d230bf10efa6faae6e8ad9dd54006139cf2ca315c4831fecba1564802fd64ffafb8cb4d317bb5003709215e5ebb10439de34a333ead42a01b735841d5c3e8f618a4c17b481edca65e030c8921612c56d0fbbd6be08cd4e6250d634d4a3c212b4f99a329f6296090a987c84926183953c76ea3bbcaa8a13b7f2e13de61975eb09cc36ae4670a16298ea49e388f2b5ee1b2c49493852cab75ae5fc50a8bb603282ecfb366d9c8fdc0f445856d17d9d7e17cde4527978b06a5eec8c7c17084fcc8a77e325000b727bfc1f0e3937810a3652cc46cb78cc04c0348b2764705923591b047c42067b49a9e4d691898c3f6442fecefb97b5de3901935bd1868ee6167146f361b4d7935e859b0a254b77c04c27481cf24bffa8b6c210a1a2dc612d9e96d338f50c8c00d46fdda808b9d71bff10c04f040533be7406f56b1a1b41390e790658994c79f19e59b582a4fa4a64d5ad23c9b7bf142def976b0f9c02ebf2c35f97f5f89d5ce8d0232ede9f2ee0cb3fca1794603527b76f220a4ee32c69d1c107ca171301a73ecbf373878bd1518b1ffb91878b0e5bc836c6a494175442f71dc361b0f01eb9f854f20156463782dff34f51c4305cba80dfbddb4b209c558409b4dc6e0d59ab99288ff3e188e12b9acbecb9dc4c3e67e0b67a02c962b1449cfb408bab08e19c19845b580f29ccbfd346ac1ba5acd2f6d19aa5a7a7f</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">输入密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>那些记忆</title>
    <url>/huifang/index.html</url>
    <content><![CDATA[<p><a href="./happy2024.html">2024年生日快乐</a></p>
<!-- flag of hidden posts -->]]></content>
  </entry>
  <entry>
    <title>2024年生日快乐</title>
    <url>/huifang/happy2024.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="bb3cb3624f8108576563f59c4b72a16c26756d993a300911b6eff74745afc9b8">1f3bac7764885d9fe7888829ad1c814abf6a19a3536396e674171e76081ac44a1b3713b1e382c1eab9069d04ea16ecbbdf328e9b08f3f027aa586529463e5e69a7978828643e479478d5fd0974342c2c23b6316494cc072c50e95415d65e4e45352de837dd0e7e71ffb4311f888cbd60f6736f6d85785f622700b33ca7b44605cc982b80d8dd45f12a285f607fcc1ce536937383320ef2aecb086a2253862b8fb0def7d8aecc0ee87f62d303154381c2945fb08bc518911ae4688bd1dcfde0ac71825ea2fef41de9896048998ee829adf3babd99672fd585a932d40f1ba03d9ce7c624830d03a5feaff3dce065cd47fcc235b05ca2a27398cda75dd16bb69fbb8d0f1202a365e5e4b97453143af4d803728d914781665bfa643dfba70be23384f1cbd377b64294b0ba02a47489da201d153c8d119632463a12b8bc70f3f8bd653e18ca16d3c24e93013a7f0b612000985e69cbd43cdb217bb6f0450e7885c8a4cf08a9578e753c7225848289aa12d95dcebd1ced447b97ce14002481928809749fe0145075d419f2dc9979cc9d9f476b9a30dd6c1a5c003c874a9669f1702a5d629ea2bfb19a9efa26b672c4a6b8b9a2fe2f82e1ebaeb67ad411c738739867b621c2d1d57ccf8fd6976e6af8ea60bfb855235e3bcdcf3d8dc1825fa1e78cc712a74302c0c4b1f713a0ef4538f84e5d4bd9762cd98a333eb0d3da3eace7881cc685653c09d133788416dc7cc8dc2ea45a8eb73b6c583f224653279b3ddb3e4465902d70df26659504e2541c9cb6100d5101f1d4cb0b1811332cf97baff0ca4b35af4d3b6aa13250ea1ae5038b4bd3ccd2d5f00ccd53fb925d763cb5a152da0a7c31210c2894ee510874927007adf844d85630fe3ca7b0c97a7073932ffb42f16869604b90e07f9f5430d3cabd3ae952bcf5f504744cd6e958f1b7731f1ebc4221907e3bf4a64aeb8834a5fb865d9e61bf6165d697c91ab657a449783eaf20629a7fe1c9e605b039b78c86fcb00c8ef98d8dd07d6b22a71f3f2e7baf35361f37445e8cd569894f93a43f13cea857947f2b29ba86b80c84bd6e170fb8ea13100dec0141c669c089e91ab59b1e0216457b1c7d97573f8a4233c1e99092fce10abd139f239c85db699f7c02758f8044cf827a2bd1ff7a9510c5a7bfa331dc718f8a81ff88ceeb1f44bc1bc52e92f39497bdede660c427b6b19988b75f36aa16371e3f56b3b178ba5f96fd4fdf17cd7e06e51e21ff543edd5b6ae82e73cf966df0cb010a8e7a8e486a6c349fd6c1306edd4d816bf7f52283a37b2b23e30e386939931e3dbb8dc728f69801093163e018850f4fe85be09252b06cbf6404813ace42cd1d5531c60893d86b4c3cef7e078cdd22960586c92005e9a4d02c3b1431ef6aa4966c0fb9042b95a0b5cac959a62698b7b000c32f51c55df4d71c4a3cb90950ade4d3361516995d52467961325b51ccdf4bb96bbec066bd7a077792a1259b40851d16bc5234240c4e3a8b94c8e02d854a22928b1eb1f6cdcbdea9ad88300c235086c6d77c7493aea1efb98080acf92879ca36195268fba3b5a9b79a8247b8b600bcfc1876f8700541656b154e47b404bd04ea3a3ca3dcab78f798fb752749f14afe166df0b6486d57807bb0bf089a6d6ad7904a9eb2ae8a42fc0c5cb28a98381ed0efdfa655d550afd293f0371a4242805b600213c6912ca140782e33d4b6a35dd7138db80b76c135432e7e9fa22834d0bf35c072c6bdd9db67eddacedb003f62974e5e7c05bd0abc044e2893fb7b2caa5dc35927df286a4dd67548b0527ae4ae67570dbcb3e9da6c3f66132142da59ab80066cb8057af48aaf11d91d9b21ef08f0e0aa8fb28eead11d399974a07046cf3c695389e88b086c145aff9c573d408a634ee9de4dd9353b2493a92b1e8d4565a136039606fb74504249c8cb39e60b76b08d9741a3efa9506899d275e35206b0b9cdb1fee217b3c96126eff4c9f9a7ae04b66a5724df0ccf91b79b20fc7ae18fe97545ba8158bdd539d1cfa03c4bc0e984a812131b3864bf3c5e400fa239a0203077888dc3132953182763d986ee879dcb60af48706b4ac0b813b0bb806d9a3aad604805c7e485b5b2775cd84120cfacf62d5dda66d8c7a83ae4ea6dfd127328b29caf7ab21240047330f318384b72b34c793d2b07d2cb70811b4ecffb94225ecacbd1fa2bead19820ca7037b460edcf17bc5688d8cc8a6cdb6607ca23b42338e7d0b91dc280176bf7ebe62f59d3d8dc50344b70ab904cc117b6c79ad403e04de8cc0e4ff1c237fd301198ab855d908a1354f942f745afdedd89bb3b942a86d30ced9c0bdb2f79092d59f2b43b3c21c54d7f92372b6ef9f080e18162bbe0a549eb62ef6bae35d8984e19ad51a3758331e627b72a747487a26f975b0eb35fd7fbdc5c34dedb0cf515c0fb3d581adcbfde09ca0a60d3df1b2749d9504b1e4bafc514218cea46797b955a072d34af6cc25f526b8aeab8a0c13b0275621befc286abf0b81db5e043c6109a3fdada795289f47de3e56edf31be5258623e786ec4dc416ad5c7877fe0b8d213f34d72842a24a4f449d1996a6f492e89ea65661d040338390525c2eb6cf5a70ca973e218f9c117079af935624332f0651e533f9386f1d741d99b3a212afad6514f7a6c5122c538d9fd5e5af69ef9d2acac781f9fddd3e2cb60d57e6f8aa9e2d5f4fc570b3ad16211f14e9e050f3a205c2627270ab9c9a1bf0e8b155fc6d60af7739ff60f7b8cc8935f9da6bc1ec584454d49a32ec6b2c553</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">输入密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>20240921001</title>
    <url>/nagging/20240921001.html</url>
    <content><![CDATA[<p>哈哈哈，又多了个发疯的地方。昨晚加今天上午，终于给博客加上了碎碎念模块。</p>
]]></content>
  </entry>
  <entry>
    <title>20240921002</title>
    <url>/nagging/20240921002.html</url>
    <content><![CDATA[<p>最近在体验数据分析，谷歌分析最复杂，微软分析最好看，百度分析最实用。</p>
]]></content>
  </entry>
  <entry>
    <title>20240922001</title>
    <url>/nagging/20240922001.html</url>
    <content><![CDATA[<p>哭😭，被产品运营各种指标搞得晕头转向</p>
]]></content>
  </entry>
  <entry>
    <title>20250313001</title>
    <url>/nagging/20250313001.html</url>
    <content><![CDATA[<p>早上来的比较早，中午午休后还剩半小时时间，有点闲着不知道做什么好。时间比较碎，不太适合推事情进度，游戏、刷资讯、刷视频有时候又不想弄，还是比较喜欢刷自己以前写的东西，还有就是自己喜欢看的几个博客。</p>
]]></content>
  </entry>
  <entry>
    <title>碎碎念</title>
    <url>/nagging/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>标签</title>
    <url>/tags/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>转载</title>
    <url>/repost/index.html</url>
    <content><![CDATA[<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/logo-next.svg"></object>
<p>转载</p><p>转载列表</p>
<a href="./default/index.html"></a>
</div><div class="link-grid-container">
<object class="link-grid-image" data="/images/logo-wangdoc.png"></object>
<p>Git教程</p><p>转载于阮一峰WangDoc的git-tutuorial</p>
<a href="./git-tutorial/index.html"></a>
</div></div>
]]></content>
  </entry>
  <entry>
    <title>Git简介</title>
    <url>/repost/git-tutorial/basic.html</url>
    <content><![CDATA[<p>Git是一种源码管理系统（source code management，缩写为SCM）。它对当前文件提供版本管理功能，核心思想是对当前文件建立一个对象数据库（object database），将历史版本信息存放在这个数据库中。</p>
<h1 id="1-Git操作流程"><a href="#1-Git操作流程" class="headerlink" title="1. Git操作流程"></a>1. Git操作流程</h1><ul>
<li>安装Git</li>
<li>提交用户名和电子邮件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">&quot;Some One&quot;</span></span><br><span class="line">$ git config --global user.email <span class="string">&quot;someone@gmail.com&quot;</span></span><br></pre></td></tr></table></figure>

<ol>
<li>git init：新建一个Git库</li>
<li>git status：查看目前状态</li>
<li>git add &lt;文件名&gt;：添加文件从工作区到暂存区</li>
<li>git commit -m “提示信息”：从暂存区提交到代码仓库</li>
<li>git log：查看提交commit的信息</li>
<li>git remote add origin <a href="https://github.com/try-git/try_git.git">https://github.com/try-git/try_git.git</a> : 添加远程指针</li>
<li>git push -u origin master：将本地的master分支推送到远程origin主机，-u参数表示记住对应关系，下次可以直接git push推送。</li>
<li>git pull origin master：将远程主机origin的代码取回本地，与本地的master分支合并</li>
<li>git diff HEAD：查看与上一次commit的区别</li>
</ol>
<h2 id="1-1-发布一个版本"><a href="#1-1-发布一个版本" class="headerlink" title="1.1 发布一个版本"></a>1.1 发布一个版本</h2><p>为当前分支打上版本号。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git tag -a [VERSION] -m &quot;released [VERSION]&quot;</span><br><span class="line">$ git push origin [VERSION]</span><br></pre></td></tr></table></figure>

<h1 id="2-Git对象"><a href="#2-Git对象" class="headerlink" title="2. Git对象"></a>2. Git对象</h1><p>对象数据库包含四类对象。</p>
<ul>
<li>Blob：包含二进制数据，它们是文件内容。只要文件内容改变，就会在对象数据库中生成一个blob对象。注意，blob对象只保存文件内容，不含文件名和文件存储位置等信息。如果文件名改变，或者文件储存位置改变，不会生成新的blob对象。</li>
<li>Tree：blob对象的集合，以及它们的文件名和权限。一个tree对象描述一个时点上的一个目录。</li>
<li>Commit：描述一个时点上的项目状态，包含一条log信息，一个tree对象和指向父节点（parent commits）的指针。第一个commit对象没有父节点。<ul>
<li>记录 root tree SHA1</li>
<li>记录 parent commit SHA1</li>
<li>记录作者、时间和 commit message 资讯</li>
</ul>
</li>
<li>tag</li>
</ul>
<p>对象数据库依赖SHA哈希函数。当一个对象加入数据库，它会被SHA函数处理，得到的结果就是该对象在数据库中的名字（前两个字节被当作目录名，用来提高效率）。</p>
<p>Git命令基本上是图数据库操作命令，用来删除&#x2F;操作节点、移动指针等等。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">$ git init</span><br><span class="line">$ <span class="built_in">echo</span> hello &gt; hello.txt</span><br><span class="line">$ git add .</span><br><span class="line">$ tree .git</span><br><span class="line"><span class="comment"># 存在 .git/objects/ce/013625030ba8dba906f756967f9e9ca394464a</span></span><br><span class="line"><span class="comment"># 这是 hello 内容的 SHA1</span></span><br><span class="line">$ <span class="built_in">printf</span> <span class="string">&quot;blob 6\x00hello\n&quot;</span> | shasum</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;hello&quot;</span> | git hash-object --stdin</span><br><span class="line">$ git cat-file -p ce0136</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上面代码有几点需要注意。</p>
<ul>
<li><code>git add</code>命令就会生成二进制对象。</li>
<li>shasum命令返回字符串的SHA哈希函数结果。</li>
<li><code>git hash-object</code>命令计算一个文件的Git对象ID，stdin参数表示从标准输入读取，而不是从本地文件读取。</li>
<li><code>git cat-file</code>命令显示Git对象文件的内容和大小信息，p参数表示以易于阅读的格式显示。</li>
</ul>
<p>树对象保存当前目录的快照。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">040000 tree 0eed1217a2947f4930583229987d90fe5e8e0b74 data</span><br><span class="line">100664 blob 5e40c0877058c504203932e5136051cf3cd3519b letter.txt</span><br><span class="line">100664 blob 274c0052dd5408f8ae2bc8440029ff67d79bc5c3 number.txt</span><br></pre></td></tr></table></figure>

<p>commit（快照）对象也保存在<code>.git/objects</code>目录。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tree ffe298c3ce8bb07326f888907996eaa48d266db4</span><br><span class="line">author Mary Rose Cook &lt;mary@maryrosecook.com&gt; 1424798436 -0500</span><br><span class="line">committer Mary Rose Cook &lt;mary@maryrosecook.com&gt; 1424798436 -0500</span><br><span class="line"></span><br><span class="line">a1</span><br></pre></td></tr></table></figure>

<h2 id="2-1-配置"><a href="#2-1-配置" class="headerlink" title="2.1 配置"></a>2.1 配置</h2><p>指定全局的.gitignore文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --global core.excludesfile=/Users/flores/.gitignore</span><br></pre></td></tr></table></figure>

<h1 id="3-目录结构"><a href="#3-目录结构" class="headerlink" title="3. 目录结构"></a>3. 目录结构</h1><ul>
<li>.git&#x2F;refs&#x2F;heads：保存各个分支的指针</li>
<li>.git&#x2F;HEAD 文件，保存HEAD指针</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ref: refs/heads/master</span><br></pre></td></tr></table></figure>

<p>上面代码说明HEAD指向<code>.git/refs/heads/master</code>文件，该文件是一个Hash值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a87cc0f39d12e51be8d68eab5cef1d31e8807a1c</span><br></pre></td></tr></table></figure>

<ul>
<li>.git&#x2F;refs&#x2F;tags：保存tag指针</li>
</ul>
<h2 id="3-1-缓冲区域（index）"><a href="#3-1-缓冲区域（index）" class="headerlink" title="3.1 缓冲区域（index）"></a>3.1 缓冲区域（index）</h2><p>Index区域（.git&#x2F;index）是一个二进制文件，用来保存当前目录在某个时点的状态。</p>
<p><code>git init</code>命令用来创建index区域，以及对象数据库（.dircache&#x2F;objects）。</p>
<p>100644 为文件模式,表示这是一个普通文件；100755 表示可执行文件,120000 表示 symbolic link。</p>
<p><code>.git/index</code>文件，保存暂存区的文件名和对应的Hash值，每行对应一个文件。下面是一个例子。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">data/letter.txt 5e40c0877058c504203932e5136051cf3cd3519b</span><br><span class="line">data/number.txt 274c0052dd5408f8ae2bc8440029ff67d79bc5c3</span><br></pre></td></tr></table></figure>

<h1 id="4-Git-commit的全过程"><a href="#4-Git-commit的全过程" class="headerlink" title="4. Git commit的全过程"></a>4. Git commit的全过程</h1><ol>
<li>用内容产生 blob object</li>
<li>写入 file mode, blob SHA1, file name 到 staging area</li>
<li>根据 staging area 产生 Tree object</li>
<li>用 root tree SHA1 和 parent commit SHA1 产生<br>commit object</li>
<li>用 commit SHA1 更新 master 参考</li>
</ol>
<p>如何不用 <code>git add</code> 和 <code>git commit</code>指令完成 commit 动作?</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># git add的部分</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;hola&quot;</span> | git hash-object -w --stdin</span><br><span class="line">$ git update-index --add --cacheinfo \</span><br><span class="line">100644 5c1b14949828006ed75a3e8858957f86a2f7e2eb hola.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># git commit的部分</span></span><br><span class="line"></span><br><span class="line">$ git write-tree</span><br><span class="line">$ git commit-tree 27b9d5 -m <span class="string">&quot;Second commit&quot;</span> -p 30b060</span><br><span class="line">$ git update-ref refs/heads/master 97b806c9e5561a08e0df1f1a60857baad3a1f02e</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="5-父节点"><a href="#5-父节点" class="headerlink" title="5. 父节点"></a>5. 父节点</h1><p>合并产生的新节点，会有两个父节点。第一个是当前所在分支的父节点，第二个合并进来的那个分支的父节点。</p>
<h1 id="6-Tag对象"><a href="#6-Tag对象" class="headerlink" title="6. Tag对象"></a>6. Tag对象</h1><p>Tag 分两种:annotated tag 才会产生 object。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">$ git tag -a release</span><br><span class="line">$ git rev-parse release</span><br><span class="line">$ git cat-file -p 2450f3</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>tag对象的内容。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">object 309be0</span><br><span class="line">type commit</span><br><span class="line">tag release</span><br><span class="line">tagger ihower 1375383070 +0800</span><br><span class="line">Release!</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="7-Reference（指针）"><a href="#7-Reference（指针）" class="headerlink" title="7. Reference（指针）"></a>7. Reference（指针）</h1><p>所谓指针（reference），只是一个链接，用来指向其他物体，方便引用。Git有三种指针，但是所有指针归根结底都是指向某个commit。</p>
<ul>
<li>Tag指针：指向某个commit，或者指向某个tag对象。保存位置在.git&#x2F;refs&#x2F;tags&#x2F;目录，文件名为tag名，内容为某个commit或ref object的SHA1哈希。</li>
<li>Branch指针：指向某个commit。每次该分支有新的commit，指针就会变动。</li>
<li>HEAD指针：指向目前所在的Branch，用来区分目前在哪个分支。比如，内容为ref: refs&#x2F;heads&#x2F;<br>master。</li>
</ul>
<h1 id="8-团队开发模式"><a href="#8-团队开发模式" class="headerlink" title="8. 团队开发模式"></a>8. 团队开发模式</h1><p>集中式工作流程：团队内部私有项目，大家都有权限 Push 到共用的 Repository</p>
<p>管理员工作流程：适合一般 Open Source 项目,只有少部分人有权限可以 Push到 Repository,其他开发者用用 request pull 请求合并。例如 GitHub 提供的 Fork 和 Pull Request 功能。</p>
<h1 id="9-分支管理策略"><a href="#9-分支管理策略" class="headerlink" title="9. 分支管理策略"></a>9. 分支管理策略</h1><h2 id="9-1-GitHub-Flow"><a href="#9-1-GitHub-Flow" class="headerlink" title="9.1 GitHub Flow"></a>9.1 GitHub Flow</h2><ul>
<li>master 是 stable&#x2F;production 可部署的版本</li>
<li>任何开发从 master branch 分支出 feature branch</li>
<li>送 pull request 开始进行讨论、code review和测试</li>
<li>最后合并回 master 代表可以部署了</li>
</ul>
<p>pros and cons</p>
<ul>
<li>简单、清楚、容易了解</li>
<li>搭配 GitHub 的 Pull Request 界面</li>
<li>没有 release branch,东西一进 master 就上 production</li>
</ul>
<h2 id="9-2-Ruby-on-Rails"><a href="#9-2-Ruby-on-Rails" class="headerlink" title="9.2 Ruby on Rails"></a>9.2 Ruby on Rails</h2><ul>
<li>master 是开发版本</li>
<li>feature branches 审核完后,合并进 master</li>
<li>maintenance branches,用 cherry-pick 做 backporting</li>
<li>基本上就是 GitHub Flow 加上 maintenance branches 维护旧版的设计</li>
<li>版本号(Tag)打在 master 上,通过 preview 和 beta 的版本号提前释出</li>
</ul>
<h2 id="9-3-CMake"><a href="#9-3-CMake" class="headerlink" title="9.3 CMake"></a>9.3 CMake</h2><ul>
<li>master 预备释出的版本,feature branches 从这里分支出去</li>
<li>feature branch 完成后,合并进 next</li>
<li>next 整合版本,完成的 feature branch 先合并到</li>
</ul>
<h1 id="10-Git远程操作"><a href="#10-Git远程操作" class="headerlink" title="10. Git远程操作"></a>10. Git远程操作</h1><p>Git的repo一般是用来指本地库，远程库（remote）主要用来存档、合作、分享和触发持续集成。 </p>
<hr>
<p><strong>参考链接</strong></p>
<ul>
<li>corbet, <a href="https://lwn.net/Articles/131657/">The guts of git</a>: 最早的一篇介绍Git的文章，可以了解Git的总体设计思路</li>
<li>张文钿, <a href="http://ihower.tw/blog/archives/7938">git从微观到宏观</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>分支</title>
    <url>/repost/git-tutorial/branch.html</url>
    <content><![CDATA[<p>分支是 Git 最重要的概念之一，也是最常用的操作之一。几乎所有 Git 操作流程都离不开分支。</p>
<p><code>git branch</code>命令可以列出本地的所有分支。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git branch</span><br></pre></td></tr></table></figure>

<p>创建一个名为<code>MyBranch</code>的新分支，但是依然停留在当前分支。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git branch MyBranch</span><br></pre></td></tr></table></figure>

<p>在远程主机<code>origin</code>上创建一个<code>MyBranch</code>的分支，并与本地的同名分支建立追踪关系。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git push -u origin MyBranch</span><br></pre></td></tr></table></figure>

<p>将当前分支改名为<code>MyBranch</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git branch -m MyBranch</span><br></pre></td></tr></table></figure>

<p>删除<code>MyBranch</code>分支，前提是该分支没有未合并的变动。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git branch -d MyBranch</span><br></pre></td></tr></table></figure>

<p>强制删除<code>MyBranch</code>分支，不管有没有未合并变化。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git branch -D MyBranch</span><br></pre></td></tr></table></figure>

<p>切换到<code>MyBranch</code>分支，当前的工作区会变为<code>MyBranch</code>分支的内容。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout MyBranch</span><br></pre></td></tr></table></figure>

<p>基于<code>MyBranch</code>分支创建一个新的<code>NewBranch</code>分支，新的<code>NewBranch</code>分支将成为当前的工作区。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout -b NewBranch MyBranch</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Git教程</title>
    <url>/repost/git-tutorial/index.html</url>
    <content><![CDATA[<div class="note info no-icon"><p><strong>转载于：</strong> <a href="https://github.com/wangdoc/git-tutorial">git-tutorial | WangDoc&#x2F;阮一峰</a></p>
</div>

<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h1><ul>
<li><a href="./operations.html">操作 operations</a></li>
<li><a href="./basic.html">基础 basic</a></li>
<li><a href="./branch.html">分支 branch</a></li>
<li><a href="./tag.html">标签 tag</a></li>
<li><a href="./internal.html">内部实现 internal</a></li>
<li><a href="./reference.html">参考资料 reference</a></li>
</ul>
<h1 id="2-命令详情"><a href="#2-命令详情" class="headerlink" title="2. 命令详情"></a>2. 命令详情</h1><table>
<thead>
<tr>
<th>类别</th>
<th>命令详情</th>
</tr>
</thead>
<tbody><tr>
<td>新建代码库</td>
<td><a href="./commands/git-init.html">git-init</a><br /><a href="./commands/git-clone.html">git-clone</a></td>
</tr>
<tr>
<td>增加&#x2F;删除文件</td>
<td><a href="./commands/git-add.html">git-add</a><br /><a href="./commands/git-rm.html">git-rm</a></td>
</tr>
<tr>
<td>提交</td>
<td><a href="./commands/git-commit.html">git-commit</a><br /><a href="./commands/git-commit-tree.html">git-commit-tree</a></td>
</tr>
<tr>
<td>分支</td>
<td><a href="./commands/git-branch.html">git-branch</a><br /><a href="./commands/git-checkout.html">git-checkout</a><br /><a href="./commands/git-merge.html">git-merge</a><br /><a href="./commands/git-rebase.html">git-rebase</a><br /><a href="./commands/git-cherry-pick.html">git-cherry-pick</a></td>
</tr>
<tr>
<td>标签</td>
<td><a href="./commands/git-tag.html">git-tag</a></td>
</tr>
<tr>
<td>查看信息</td>
<td><a href="./commands/git-log.html">git-log</a><br /><a href="./commands/git-diff.html">git-diff</a><br /><a href="./commands/git-show.html">git-show</a></td>
</tr>
<tr>
<td>远程同步</td>
<td><a href="./commands/git-pull.html">git-pull</a><br /><a href="./commands/git-remote.html">git-remote</a></td>
</tr>
<tr>
<td>撤销</td>
<td><a href="./commands/git-reset.html">git-reset</a><br /><a href="./commands/git-revert.html">git-revert</a><br /><a href="./commands/git-restore.html">git-restore</a></td>
</tr>
<tr>
<td>其他</td>
<td><a href="./commands/git-stash.html">git-stash</a><br /><a href="./commands/git-cat-file.html">git-cat-file</a><br /><a href="./commands/git-hash-object.html">git-hash-object</a><br /><a href="./commands/git-ls-files.html">git-ls-files</a><br /><a href="./commands/git-rev-parse.html">git-rev-parse</a><br /><a href="./commands/git-update-index.html">git-update-index</a><br /><a href="./commands/git-update-ref.html">git-update-ref</a><br /><a href="./commands/git-write-tree.html">git-write-tree</a></td>
</tr>
</tbody></table>
<hr>
<p><strong>更新记录</strong></p>
<ul>
<li><p>20241020：整理一些分类</p>
</li>
<li><p>20240616：初稿</p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>内部实现</title>
    <url>/repost/git-tutorial/internal.html</url>
    <content><![CDATA[<h1 id="内部实现"><a href="#内部实现" class="headerlink" title="内部实现"></a>内部实现</h1><h2 id="git-目录"><a href="#git-目录" class="headerlink" title=".git 目录"></a>.git 目录</h2><p>版本管理的所有信息，保存在项目的<code>.git</code>目录之中。如果没有这个目录，Git 就会认为这个仓库没有建立版本管理，必须进行初始化。<code>git init</code>命令的主要作用，就是建立<code>.git</code>目录。</p>
<p><code>.git/config</code>文件保存仓库的设置。</p>
<p><code>.git/HEAD</code>文件保存当前工作分支的引用。</p>
<p><code>.git/hooks</code>目录保存各种事件挂钩的脚本。</p>
<p><code>.git/objects</code>目录保存文件的内容，格式是二进制<code>blob</code>。</p>
<h2 id="哈希签名"><a href="#哈希签名" class="headerlink" title="哈希签名"></a>哈希签名</h2><p>每次提交的时候，每个文件、每个树节点（目录）和提交本身，都会生成一个40个字符长的 SHA-1 哈希。</p>
<p>哈希作为文件名，文件本身保留在<code>.git/objects</code>目录之中。</p>
<h2 id="git-add-命令"><a href="#git-add-命令" class="headerlink" title="git add 命令"></a>git add 命令</h2><p><code>git add</code>会将变动的文件写入<code>.git/objects</code>目录。它内部调用的是<code>git hash-object</code>命令,该命令会计算 SHA-1 哈希，并将 blob 文件放入<code>.git/objects</code>目录。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git hash-object -w myfile.txt</span><br></pre></td></tr></table></figure>

<p><code>git cat-file</code>命令可以查看 blob 格式对应的原始文件内容。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git cat-file -p e69de29bb2d1d6434b8b29ae775ad8c2e48c5391</span><br></pre></td></tr></table></figure>

<h2 id="git-commit-命令"><a href="#git-commit-命令" class="headerlink" title="git commit 命令"></a>git commit 命令</h2><p><code>git commit</code>命令用于有变动的、并已提交到<code>.git/objects</code>的文件写入历史。</p>
<p><code>git write-tree</code>为当前仓库创建树节点。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git write-tree</span><br></pre></td></tr></table></figure>

<p><code>git commit-tree</code>命令将指定的树节点写入历史。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span>“first commit”| git commit-tree \ 6e9432aeedbad83fbffb7f8aae4a5d1ab50b7fdf</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>参考链接</title>
    <url>/repost/git-tutorial/reference.html</url>
    <content><![CDATA[<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul>
<li>Andy Jeffries, <a href="https://www.andyjeffries.co.uk/25-tips-for-intermediate-git-users/">25 Tips for Intermediate Git Users</a>i- Mark Lodato, <a href="https://marklodato.github.io/visual-git-guide/index-zh-cn.html">图解 Git</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Git的操作</title>
    <url>/repost/git-tutorial/operations.html</url>
    <content><![CDATA[<h1 id="Git的操作"><a href="#Git的操作" class="headerlink" title="Git的操作"></a>Git的操作</h1><h2 id="新建代码库"><a href="#新建代码库" class="headerlink" title="新建代码库"></a>新建代码库</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在当前目录新建一个Git代码库</span></span><br><span class="line">$ git init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个目录，将其初始化为Git代码库</span></span><br><span class="line">$ git init [project-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载一个项目和它的整个代码历史</span></span><br><span class="line">$ git <span class="built_in">clone</span> [url]</span><br></pre></td></tr></table></figure>

<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>Git的设置文件为<code>.gitconfig</code>，它可以在用户主目录下，也可以在项目目录下。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示当前的Git配置</span></span><br><span class="line">$ git config --list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑Git配置文件</span></span><br><span class="line">$ git config -e [--global]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置提交代码时的用户信息</span></span><br><span class="line">$ git config [--global] user.name <span class="string">&quot;[name]&quot;</span></span><br><span class="line">$ git config [--global] user.email <span class="string">&quot;[email address]&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="增加-删除文件"><a href="#增加-删除文件" class="headerlink" title="增加&#x2F;删除文件"></a>增加&#x2F;删除文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加指定文件到暂存区</span></span><br><span class="line">$ git add [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加指定目录到暂存区，包括子目录</span></span><br><span class="line">$ git add [<span class="built_in">dir</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加当前目录的所有文件到暂存区</span></span><br><span class="line">$ git add .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除工作区文件，并且将这次删除放入暂存区</span></span><br><span class="line">$ git <span class="built_in">rm</span> [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止追踪指定文件，但该文件会保留在工作区</span></span><br><span class="line">$ git <span class="built_in">rm</span> --cached [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 改名文件，并且将这个改名放入暂存区</span></span><br><span class="line">$ git <span class="built_in">mv</span> [file-original] [file-renamed]</span><br></pre></td></tr></table></figure>

<h2 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 提交暂存区到仓库区</span></span><br><span class="line">$ git commit -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交暂存区的指定文件到仓库区</span></span><br><span class="line">$ git commit [file1] [file2] ... -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交工作区自上次commit之后的变化，直接到仓库区</span></span><br><span class="line">$ git commit -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交时显示所有diff信息</span></span><br><span class="line">$ git commit -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用一次新的commit，替代上一次提交</span></span><br><span class="line"><span class="comment"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span></span><br><span class="line">$ git commit --amend -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重做上一次commit，并包括指定文件的新变化</span></span><br><span class="line">$ git commit --amend &lt;file1&gt; &lt;file2&gt; ...</span><br></pre></td></tr></table></figure>

<h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出所有本地分支</span></span><br><span class="line">$ git branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有远程分支</span></span><br><span class="line">$ git branch -r</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有本地分支和远程分支</span></span><br><span class="line">$ git branch -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，但依然停留在当前分支</span></span><br><span class="line">$ git branch [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，并切换到该分支</span></span><br><span class="line">$ git checkout -b [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，指向指定commit</span></span><br><span class="line">$ git branch [branch] [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，与指定的远程分支建立追踪关系</span></span><br><span class="line">$ git branch --track [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到指定分支，并更新工作区</span></span><br><span class="line">$ git checkout [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立追踪关系，在现有分支与指定的远程分支之间</span></span><br><span class="line">$ git branch --set-upstream [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并指定分支到当前分支</span></span><br><span class="line">$ git merge [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择一个commit，合并进当前分支</span></span><br><span class="line">$ git cherry-pick [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line">$ git branch -d [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程分支</span></span><br><span class="line">$ git push origin --delete &lt;branch-name&gt;</span><br><span class="line">$ git branch -dr &lt;remote/branch&gt;</span><br></pre></td></tr></table></figure>

<h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出所有tag</span></span><br><span class="line">$ git tag</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个tag在当前commit</span></span><br><span class="line">$ git tag [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个tag在指定commit</span></span><br><span class="line">$ git tag [tag] [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看tag信息</span></span><br><span class="line">$ git show [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交指定tag</span></span><br><span class="line">$ git push [remote] [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交所有tag</span></span><br><span class="line">$ git push [remote] --tags</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，指向某个tag</span></span><br><span class="line">$ git checkout -b [branch] [tag]</span><br></pre></td></tr></table></figure>

<h2 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示有变更的文件</span></span><br><span class="line">$ git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前分支的版本历史</span></span><br><span class="line">$ git <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示commit历史，以及每次commit发生变更的文件</span></span><br><span class="line">$ git <span class="built_in">log</span> --<span class="built_in">stat</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个文件的版本历史，包括文件改名</span></span><br><span class="line">$ git <span class="built_in">log</span> --follow [file]</span><br><span class="line">$ git whatchanged [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示指定文件相关的每一次diff</span></span><br><span class="line">$ git <span class="built_in">log</span> -p [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示指定文件是什么人在什么时间修改过</span></span><br><span class="line">$ git blame [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示暂存区和工作区的差异</span></span><br><span class="line">$ git diff</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示暂存区和上一个commit的差异</span></span><br><span class="line">$ git diff --cached [&lt;file&gt;]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示工作区与当前分支最新commit之间的差异</span></span><br><span class="line">$ git diff HEAD</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示两次提交之间的差异</span></span><br><span class="line">$ git diff [first-branch]...[second-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交的元数据和内容变化</span></span><br><span class="line">$ git show [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交发生变化的文件</span></span><br><span class="line">$ git show --name-only [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交时，某个文件的内容</span></span><br><span class="line">$ git show [commit]:[filename]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前分支的最近几次提交</span></span><br><span class="line">$ git reflog</span><br></pre></td></tr></table></figure>

<h2 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载远程仓库的所有变动</span></span><br><span class="line">$ git fetch [remote]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有远程仓库</span></span><br><span class="line">$ git remote -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个远程仓库的信息</span></span><br><span class="line">$ git remote show [remote]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加一个新的远程仓库，并命名</span></span><br><span class="line">$ git remote add [shortname] [url]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取回远程仓库的变化，并与本地分支合并</span></span><br><span class="line">$ git pull [remote] [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传本地指定分支到远程仓库</span></span><br><span class="line">$ git push [remote] [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强行推送当前分支到远程仓库，即使有冲突</span></span><br><span class="line">$ git push [remote] --force</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送所有分支到远程仓库</span></span><br><span class="line">$ git push [remote] --all</span><br></pre></td></tr></table></figure>

<h2 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 恢复暂存区的指定文件到工作区</span></span><br><span class="line">$ git checkout [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复某个commit的指定文件到工作区</span></span><br><span class="line">$ git checkout [commit] [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复上一个commit的所有文件到工作区</span></span><br><span class="line">$ git checkout .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span></span><br><span class="line">$ git reset [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置暂存区与工作区，与上一次commit保持一致</span></span><br><span class="line">$ git reset --hard</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span></span><br><span class="line">$ git reset [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span></span><br><span class="line">$ git reset --hard [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span></span><br><span class="line">$ git reset --keep [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个commit，用来撤销指定commit</span></span><br><span class="line"><span class="comment"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span></span><br><span class="line">$ git revert [commit]</span><br></pre></td></tr></table></figure>

<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成一个可供发布的压缩包</span></span><br><span class="line"><span class="comment"># git archive</span></span><br></pre></td></tr></table></figure>

<p>（完）</p>
]]></content>
  </entry>
  <entry>
    <title>转载</title>
    <url>/repost/default/index.html</url>
    <content><![CDATA[<ul>
<li><a href="./%E5%89%8D%E5%90%8E%E7%AB%AF%E6%8E%A5%E5%8F%A3%E8%A7%84%E8%8C%83-RESTful%E7%89%88.html">前后端接口规范 - RESTful 版</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>标签</title>
    <url>/repost/git-tutorial/tag.html</url>
    <content><![CDATA[<h1 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h1><h2 id="推送"><a href="#推送" class="headerlink" title="推送"></a>推送</h2><p>标签必须单独推送。也就是说，<code>git push</code>命令默认不会推送标签，必须使用<code>--tags</code>参数。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git push &amp;&amp; git push --tags</span><br></pre></td></tr></table></figure>

<p>上面的命令先推送新的 commit，成功后再单独推送标签。</p>
<p><code>--follow-tags</code>参数会使得 commit 以及与之相关的标签（注意，不是所有的标签）一起推送。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git push --follow-tags</span><br></pre></td></tr></table></figure>

<p>Git 有一个对应于<code>--follow-tags</code>的配置项，默认是关闭的。如果将它打开，以后执行<code>git push</code>的时候，默认就会带上<code>--follow-tags</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git config --global push.followTags true</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>前后端接口规范 - RESTful 版</title>
    <url>/repost/default/%E5%89%8D%E5%90%8E%E7%AB%AF%E6%8E%A5%E5%8F%A3%E8%A7%84%E8%8C%83-RESTful%E7%89%88.html</url>
    <content><![CDATA[<div class="note info no-icon"><p><strong>转载于：</strong> <a href="https://github.com/olivewind/restful-api-specification">restful-api-specification</a></p>
</div>

<p>本规范的三个目标：<strong>简洁</strong>、<strong>统一</strong>、<strong>开放</strong>。</p>
<p>关于如何设计良好风格的 RESTful API，Github 有一份<a href="https://docs.github.com/en/rest/reference/actions">满分答案</a>，熟读三遍，其义自现。本规范将在其基础之上使用尽可能简单的表述方式从以下几个常见部分作出详细约定：</p>
<ul>
<li><a href="#1-%E5%9F%BA%E7%A1%80%E7%BA%A6%E5%AE%9A">基础约定</a></li>
<li><a href="#2-%E5%88%9B%E5%BB%BA%E7%B1%BB%E6%8E%A5%E5%8F%A3">创建类接口</a></li>
<li><a href="#3-%E6%9F%A5%E8%AF%A2%E7%B1%BB%E6%8E%A5%E5%8F%A3">查询类接口</a></li>
<li><a href="#4-%E6%96%87%E4%BB%B6%E7%B1%BB%E6%8E%A5%E5%8F%A3">文件类接口</a></li>
<li><a href="#5-%E6%95%8F%E6%84%9F%E7%B1%BB%E6%8E%A5%E5%8F%A3">敏感类接口</a></li>
<li><a href="#6-%E5%9B%BE%E8%A1%A8%E7%B1%BB%E6%8E%A5%E5%8F%A3">图表类接口</a></li>
</ul>
<blockquote>
<p>注意本规范是笔者在所在公司内部制定的规范整理而来的接口规范模板，仅供你在制定规范时候参考，在落地时应根据团队实际情况作出调整，欢迎对本规范进行补充</p>
</blockquote>
<h1 id="1-基础约定"><a href="#1-基础约定" class="headerlink" title="1 基础约定"></a>1 基础约定</h1><h2 id="1-1-接口路径以-api-或-version-api-开头"><a href="#1-1-接口路径以-api-或-version-api-开头" class="headerlink" title="1.1 接口路径以 /api 或 /[version]/api 开头"></a>1.1 接口路径以 <code>/api</code> 或 <code>/[version]/api</code> 开头</h2><p>正确：<code>/api/task</code> 或 <code>/v2/api/tasks</code></p>
<p>错误：<code>/biz/tasks</code> 或 <code>/biz/api/tasks</code></p>
<p>注意：一个产品无论后端有多少个服务组成也应该只有一个 API 入口</p>
<h2 id="1-2-接口路径以-api-aa-bb-cc-dd-方式命名"><a href="#1-2-接口路径以-api-aa-bb-cc-dd-方式命名" class="headerlink" title="1.2 接口路径以 api/aa-bb/cc-dd 方式命名"></a>1.2 接口路径以 <code>api/aa-bb/cc-dd</code> 方式命名</h2><p>正确：<code>/api/task-groups</code></p>
<p>错误：<code>/api/taskGroups</code></p>
<h2 id="1-3-接口路径使用资源名词而非动词，动作应由-HTTP-Method-体现，资源组可以进行逻辑嵌套"><a href="#1-3-接口路径使用资源名词而非动词，动作应由-HTTP-Method-体现，资源组可以进行逻辑嵌套" class="headerlink" title="1.3 接口路径使用资源名词而非动词，动作应由 HTTP Method 体现，资源组可以进行逻辑嵌套"></a>1.3 接口路径使用资源名词而非动词，动作应由 HTTP Method 体现，资源组可以进行逻辑嵌套</h2><p>正确：POST <code>/api/tasks</code> 或 <code>/api/task-groups/1/tasks</code> 表示在 id 为 1 的任务组下创建任务</p>
<p>错误：POST <code>/api/create-task</code></p>
<h2 id="1-4-接口路径中的资源使用复数而非单数"><a href="#1-4-接口路径中的资源使用复数而非单数" class="headerlink" title="1.4 接口路径中的资源使用复数而非单数"></a>1.4 接口路径中的资源使用复数而非单数</h2><p>正确：<code>/api/tasks</code></p>
<p>错误：<code>/api/task</code></p>
<h2 id="1-5-接口设计面向开放接口，而非单纯前端业务"><a href="#1-5-接口设计面向开放接口，而非单纯前端业务" class="headerlink" title="1.5 接口设计面向开放接口，而非单纯前端业务"></a>1.5 接口设计面向开放接口，而非单纯前端业务</h2><p>要求我们在给接口路径命名时要面向通用业务而非单纯前端业务，以获取筛选表单中的任务字段下拉选项为例</p>
<p>正确：<code>/api/tasks</code></p>
<p>错误：<code>/api/task-select-options</code></p>
<p>虽然这个接口暂时只用在表单的下拉选择中，但是需要考虑的是在未来可能会被用在任意场景，因此应以更通用方式提供接口交由客户端自由组合</p>
<h2 id="1-6-规范使用-HTTP-方法"><a href="#1-6-规范使用-HTTP-方法" class="headerlink" title="1.6 规范使用 HTTP 方法"></a>1.6 规范使用 HTTP 方法</h2><table>
<thead>
<tr>
<th>方法</th>
<th>场景</th>
<th>例如</th>
</tr>
</thead>
<tbody><tr>
<td>GET</td>
<td>获取数据</td>
<td>获取单个：GET <code>/api/tasks/1</code>、获取列表：GET <code>/api/tasks</code></td>
</tr>
<tr>
<td>POST</td>
<td>创建数据</td>
<td>创建单个：POST <code>/api/tasks</code></td>
</tr>
<tr>
<td>PATCH</td>
<td>差量修改数据</td>
<td>修改单个：PATCH <code>/api/tasks/1</code></td>
</tr>
<tr>
<td>PUT</td>
<td>全量修改数据</td>
<td>修改单个：PUT <code>/api/tasks/1</code></td>
</tr>
<tr>
<td>DELETE</td>
<td>删除数据</td>
<td>删除单个：DELETE <code>/api/tasks/1</code></td>
</tr>
</tbody></table>
<p>其它更多请求方法请查阅 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods">MDN Web Docs</a></p>
<h2 id="1-7-规范使用-HTTP-状态码"><a href="#1-7-规范使用-HTTP-状态码" class="headerlink" title="1.7 规范使用 HTTP 状态码"></a>1.7 规范使用 HTTP 状态码</h2><table>
<thead>
<tr>
<th>状态码</th>
<th>场景</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>创建成功，通常用在同步操作时</td>
</tr>
<tr>
<td>202</td>
<td>创建成功，通常用在异步操作时，表示请求已接受，但是还没有处理完成</td>
</tr>
<tr>
<td>400</td>
<td>参数错误，通常用在表单参数错误</td>
</tr>
<tr>
<td>401</td>
<td>授权错误，通常用在 Token 缺失或失效，注意 401 会触发前端跳转到登录页</td>
</tr>
<tr>
<td>403</td>
<td>操作被拒绝，通常发生在权限不足时，注意此时务必带上详细错误信息</td>
</tr>
<tr>
<td>404</td>
<td>没有找到对象，通常发生在使用错误的 id 查询详情</td>
</tr>
<tr>
<td>500</td>
<td>服务器错误</td>
</tr>
</tbody></table>
<p>其它更多响应状态码请查阅 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status">MDN Web Docs</a></p>
<h2 id="1-8-基础外层数据结构"><a href="#1-8-基础外层数据结构" class="headerlink" title="1.8 基础外层数据结构"></a>1.8 基础外层数据结构</h2><ul>
<li><p>不分页数据</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">code</span>: <span class="number">20000</span>,</span><br><span class="line">  <span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line">  <span class="attr">message</span>: <span class="string">&quot;请求成功&quot;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;任务 1&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>分页数据</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">code</span>: <span class="number">20000</span>,</span><br><span class="line">  <span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line">  <span class="attr">message</span>: <span class="string">&quot;请求成功&quot;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">items</span>: [&#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;任务 1&#x27;</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;任务 2&#x27;</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="attr">total</span>: <span class="number">2</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>注意：其中 <code>code</code> 表示业务编码，<code>status</code> 表示 HTTP 响应状态码，如此设计的原因是部分场景下前后端之间存在不可控的网关或代理（比如某些网关有一些流量控制策略会导致直接返回 403 响应状态码，此时客户端无法分辨 403 是网关的还是业务方），类似这类情况下为了能够让客户端正确分辨业务方的真实处理结果则需要在响应体加上 <code>status</code>，而 <code>code</code> 表示的业务编码是为了帮助工程师更容易定位问题，它并不是必须的，这取决你们团队风格。</p>
<blockquote>
<p>尽管在响应体中体现了响应状态码，但这并不代表所有 HTTP 就可以全部返回 200 了，无论如何请在条件允许范围内尽可能使用标准的 HTTP 响应状态码</p>
</blockquote>
<h2 id="1-9-请求和响应字段采用-aa-bb-cc-方式命名"><a href="#1-9-请求和响应字段采用-aa-bb-cc-方式命名" class="headerlink" title="1.9 请求和响应字段采用 aa_bb_cc 方式命名"></a>1.9 请求和响应字段采用 <code>aa_bb_cc</code> 方式命名</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 正确</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">role_ids</span>: [<span class="number">11</span>,<span class="number">12</span>,<span class="number">35</span>],</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 错误</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">roleIds</span>: [<span class="number">11</span>, <span class="number">12</span>, <span class="number">35</span>],</span><br><span class="line">  <span class="title class_">RoleIds</span>: [<span class="number">11</span>, <span class="number">12</span>, <span class="number">35</span>],</span><br><span class="line">  <span class="attr">ROLE_IDS</span>: [<span class="number">11</span>, <span class="number">12</span>, <span class="number">35</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-10-时间字段以-ISO-8601-格式返回-：YYYY-MM-DDTHH-MM-SSZ"><a href="#1-10-时间字段以-ISO-8601-格式返回-：YYYY-MM-DDTHH-MM-SSZ" class="headerlink" title="1.10 时间字段以 ISO 8601 格式返回 ：YYYY-MM-DDTHH:MM:SSZ"></a>1.10 时间字段以 ISO 8601 格式返回 ：<code>YYYY-MM-DDTHH:MM:SSZ</code></h2><h2 id="1-11-常见业务字段约定"><a href="#1-11-常见业务字段约定" class="headerlink" title="1.11 常见业务字段约定"></a>1.11 常见业务字段约定</h2><p>名称：name</p>
<p>状态：status</p>
<p>创建时间：created_at</p>
<p>更新时间：updated_at</p>
<h2 id="1-12-空数组使用-，而不是-null"><a href="#1-12-空数组使用-，而不是-null" class="headerlink" title="1.12 空数组使用 []，而不是 null"></a>1.12 空数组使用 []，而不是 null</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 正确</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">code</span>: <span class="number">20000</span>,</span><br><span class="line">  <span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line">  <span class="attr">message</span>: <span class="string">&quot;请求成功&quot;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">role_ids</span>: [],</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 错误</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">code</span>: <span class="number">20000</span>,</span><br><span class="line">  <span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line">  <span class="attr">message</span>: <span class="string">&quot;请求成功&quot;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">role_ids</span>: <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-13-前后端传输过程以标准-JSON-格式，避免反复正反序列化"><a href="#1-13-前后端传输过程以标准-JSON-格式，避免反复正反序列化" class="headerlink" title="1.13 前后端传输过程以标准 JSON 格式，避免反复正反序列化"></a>1.13 前后端传输过程以标准 JSON 格式，避免反复正反序列化</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 正确</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">code</span>: <span class="number">20000</span>,</span><br><span class="line">  <span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line">  <span class="attr">message</span>: <span class="string">&quot;请求成功&quot;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">roles</span>: [&#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;角色 1&#x27;</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;角色 2&#x27;</span></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 错误</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">code</span>: <span class="number">20000</span>,</span><br><span class="line">  <span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line">  <span class="attr">message</span>: <span class="string">&quot;请求成功&quot;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">roles</span>: <span class="string">&#x27;[&#123;&quot;id&quot;:1,&quot;name&quot;:&quot;角色 1&quot;&#125;,&#123;&quot;id&quot;:2,&quot;name&quot;:&quot;角色 2&quot;&#125;]&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="2-创建类接口"><a href="#2-创建类接口" class="headerlink" title="2 创建类接口"></a>2 创建类接口</h1><h2 id="2-1-创建完成后直接返回-id"><a href="#2-1-创建完成后直接返回-id" class="headerlink" title="2.1 创建完成后直接返回 id"></a>2.1 创建完成后直接返回 id</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">code</span>: <span class="number">20000</span>,</span><br><span class="line">  <span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line">  <span class="attr">message</span>: <span class="string">&quot;创建成功&quot;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">     <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-2-关联关系只以-id-为标识，其它字段不应依赖客户端"><a href="#2-2-关联关系只以-id-为标识，其它字段不应依赖客户端" class="headerlink" title="2.2 关联关系只以 id 为标识，其它字段不应依赖客户端"></a>2.2 关联关系只以 id 为标识，其它字段不应依赖客户端</h2><p>以创建用户为例：POST <code>/api/users</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 正确</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">username</span>: <span class="string">&#x27;ming&#x27;</span></span><br><span class="line">  <span class="attr">password</span>: <span class="string">&#x27;xxxx&#x27;</span>,</span><br><span class="line">  <span class="attr">role_ids</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">username</span>: <span class="string">&#x27;ming&#x27;</span></span><br><span class="line">  <span class="attr">password</span>: <span class="string">&#x27;xxxx&#x27;</span>,</span><br><span class="line">  <span class="attr">role_ids</span>: [&#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;角色1&#x27;</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;角色2&#x27;</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;角色3&#x27;</span></span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-3-参数错误以数组形式返回，并附带用户友好的提示"><a href="#2-3-参数错误以数组形式返回，并附带用户友好的提示" class="headerlink" title="2.3 参数错误以数组形式返回，并附带用户友好的提示"></a>2.3 参数错误以数组形式返回，并附带用户友好的提示</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">code</span>: <span class="number">40000</span></span><br><span class="line">  <span class="attr">status</span>: <span class="number">400</span>;</span><br><span class="line">  <span class="attr">message</span>: <span class="string">&quot;参数错误&quot;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">errors</span>: [&#123;</span><br><span class="line">       <span class="attr">field</span>: <span class="string">&#x27;name&#x27;</span>,</span><br><span class="line">       <span class="attr">message</span>: <span class="string">&#x27;缺失&#x27;</span></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-4-删除接口应酌情提供批量删除"><a href="#2-4-删除接口应酌情提供批量删除" class="headerlink" title="2.4 删除接口应酌情提供批量删除"></a>2.4 删除接口应酌情提供批量删除</h2><p>例如 DELETE <code>/api/tasks/1</code> 表示删除 id 为 1 的任务</p>
<p>例如 DELETE <code>/api/tasks?ids=1,2,3</code> 表示批量删除 id 为 1 或 2 或 3 的任务</p>
<p>注意：如果列表数据量较大或容易沉淀无用数据的应提供批量删除功能，比如任务、文件、日志等</p>
<h1 id="3-查询类接口"><a href="#3-查询类接口" class="headerlink" title="3 查询类接口"></a>3 查询类接口</h1><h2 id="3-1-排序"><a href="#3-1-排序" class="headerlink" title="3.1 排序"></a>3.1 排序</h2><p>排序使用 <code>sort</code> 和 <code>order</code></p>
<p>例如 GET <code>/api/tasks?sort=created_at&amp;order=descend</code> 表示以创建时间降序查询数据</p>
<p><strong>注意：</strong>其中 <code>order</code> 为 <code>descend</code> 时表示降序，为 <code>ascend</code> 时表示升序</p>
<h2 id="3-2-分页"><a href="#3-2-分页" class="headerlink" title="3.2 分页"></a>3.2 分页</h2><p>分页使用 <code>page</code> 和 <code>per_page</code></p>
<p>例如 GET <code>/api/tasks?page=1&amp;per_page=10</code> 表示每页 10 条查询第一页数据</p>
<p><strong>注意：</strong>其中 <code>page</code> 从 1 开始，而不是 0，如果没有传递 <code>per_page</code> 和 <code>page</code> 参数表示不分页获取所有数据</p>
<h2 id="3-3-组合查询"><a href="#3-3-组合查询" class="headerlink" title="3.3 组合查询"></a>3.3 组合查询</h2><h3 id="3-3-1-普通筛选"><a href="#3-3-1-普通筛选" class="headerlink" title="3.3.1 普通筛选"></a>3.3.1 普通筛选</h3><p>使用键值对</p>
<p>例如 GET <code>/api/tasks?creator=ming</code> 表示查询所有 ming 用户创建的任务</p>
<h3 id="3-3-2-多列模糊查询"><a href="#3-3-2-多列模糊查询" class="headerlink" title="3.3.2 多列模糊查询"></a>3.3.2 多列模糊查询</h3><p>多列模糊查询使用 <code>keyword</code> 关键词</p>
<p>例如 GET <code>/api/tasks?keyword=ming</code> 表示查询任意列包含 ming 关键词的任务</p>
<h3 id="3-3-3-枚举筛选"><a href="#3-3-3-枚举筛选" class="headerlink" title="3.3.3 枚举筛选"></a>3.3.3 枚举筛选</h3><p>枚举筛选使用数组合并拼接</p>
<p>例如 GET <code>/api/tasks?status=pending,complete</code> 表示查询状态为阻塞和完成的任务</p>
<h3 id="3-3-4-区间查询"><a href="#3-3-4-区间查询" class="headerlink" title="3.3.4 区间查询"></a>3.3.4 区间查询</h3><p>区间使用 <code>xxx_lt</code> 和 <code>xxx_gt</code> 关键词</p>
<table>
<thead>
<tr>
<th>缩写</th>
<th>英文</th>
<th>中文</th>
</tr>
</thead>
<tbody><tr>
<td>gt</td>
<td>greater than</td>
<td>大于</td>
</tr>
<tr>
<td>gte</td>
<td>greater than or equal</td>
<td>大于等于</td>
</tr>
<tr>
<td>lt</td>
<td>less than</td>
<td>小于</td>
</tr>
<tr>
<td>lte</td>
<td>less than or equal</td>
<td>小于等于</td>
</tr>
</tbody></table>
<p>例如 GET <code>/api/tasks?weight_gt=10&amp;weight_lt=20</code> 表示查询权重在 10 和 20 之间的任务</p>
<p>例如 GET <code>/api/tasks?weight_gt=10</code> 表示查询权重大于 10 的任务</p>
<h2 id="3-4-尽可能返回所有关联数据展开详情，便于客户端显示"><a href="#3-4-尽可能返回所有关联数据展开详情，便于客户端显示" class="headerlink" title="3.4 尽可能返回所有关联数据展开详情，便于客户端显示"></a>3.4 尽可能返回所有关联数据展开详情，便于客户端显示</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">code</span>: <span class="number">20000</span>,</span><br><span class="line">  <span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line">  <span class="attr">message</span>: <span class="string">&quot;请求成功&quot;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&#x27;ming&#x27;</span></span><br><span class="line">    <span class="attr">roles</span>: [&#123;</span><br><span class="line">       <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">       <span class="attr">name</span>: <span class="string">&#x27;角色 1&#x27;</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">       <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">       <span class="attr">name</span>: <span class="string">&#x27;角色 2&#x27;</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">       <span class="attr">id</span>: <span class="number">3</span>,</span><br><span class="line">       <span class="attr">name</span>: <span class="string">&#x27;角色 3&#x27;</span></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-5-可枚举字段使用有语义英文而非无语义数字"><a href="#3-5-可枚举字段使用有语义英文而非无语义数字" class="headerlink" title="3.5 可枚举字段使用有语义英文而非无语义数字"></a>3.5 可枚举字段使用有语义英文而非无语义数字</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 正确</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">code</span>: <span class="number">20000</span>,</span><br><span class="line">  <span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line">  <span class="attr">message</span>: <span class="string">&quot;请求成功&quot;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;任务 1&#x27;</span></span><br><span class="line">    <span class="attr">status</span>: <span class="string">&#x27;pending&#x27;</span>  <span class="comment">// &#x27;pending&#x27; | &#x27;complete&#x27; | &#x27;error&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 错误</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">code</span>: <span class="number">20000</span>,</span><br><span class="line">  <span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line">  <span class="attr">message</span>: <span class="string">&quot;请求成功&quot;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;任务 1&#x27;</span></span><br><span class="line">    <span class="attr">status</span>: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-6-合理自然嵌套结构而不是平铺"><a href="#3-6-合理自然嵌套结构而不是平铺" class="headerlink" title="3.6 合理自然嵌套结构而不是平铺"></a>3.6 合理自然嵌套结构而不是平铺</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 正确</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">code</span>: <span class="number">20000</span>,</span><br><span class="line">  <span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line">  <span class="attr">message</span>: <span class="string">&quot;请求成功&quot;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;任务 1&#x27;</span></span><br><span class="line">    <span class="attr">creator</span>: &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">username</span>: <span class="string">&#x27;小明&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 错误</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">code</span>: <span class="number">20000</span>,</span><br><span class="line">  <span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line">  <span class="attr">message</span>: <span class="string">&quot;请求成功&quot;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;任务 1&#x27;</span></span><br><span class="line">    <span class="attr">creator_id</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">creator_name</span>: <span class="string">&#x27;小明&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="4-文件类接口"><a href="#4-文件类接口" class="headerlink" title="4 文件类接口"></a>4 文件类接口</h1><h2 id="4-1-统一提供单文件上传接口（-api-files），支持上传所有类型文件"><a href="#4-1-统一提供单文件上传接口（-api-files），支持上传所有类型文件" class="headerlink" title="4.1 统一提供单文件上传接口（/api/files），支持上传所有类型文件"></a>4.1 统一提供单文件上传接口（<code>/api/files</code>），支持上传所有类型文件</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 请求，注意这里是 FormData</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">file</span>: <span class="title class_">File</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">code</span>: <span class="number">20000</span>,</span><br><span class="line">  <span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line">  <span class="attr">message</span>: <span class="string">&quot;上传成功&quot;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&#x27;bb313c99&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/files/bb313c99.pdf&#x27;</span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;合同.pdf&#x27;</span> <span class="comment">// 原文件的名称</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-2-统一提供多文件上传接口（-api-multiple-files），支持上传所有类型文件"><a href="#4-2-统一提供多文件上传接口（-api-multiple-files），支持上传所有类型文件" class="headerlink" title="4.2 统一提供多文件上传接口（/api/multiple-files），支持上传所有类型文件"></a>4.2 统一提供多文件上传接口（<code>/api/multiple-files</code>），支持上传所有类型文件</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 请求，注意这里是 FormData</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">files</span>: [<span class="title class_">File</span>, <span class="title class_">File</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">code</span>: <span class="number">20000</span>,</span><br><span class="line">  <span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line">  <span class="attr">message</span>: <span class="string">&quot;上传成功&quot;</span>,</span><br><span class="line">  <span class="attr">data</span>: [&#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&#x27;bb313c99&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/files/bb313c99.pdf&#x27;</span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;合同1.pdf&#x27;</span> <span class="comment">// 原文件的名称</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&#x27;bb313c88&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/files/bb313c88.pdf&#x27;</span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;合同2.pdf&#x27;</span> <span class="comment">// 原文件的名称</span></span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-3-文件路径至少补全至根路径"><a href="#4-3-文件路径至少补全至根路径" class="headerlink" title="4.3 文件路径至少补全至根路径"></a>4.3 文件路径至少补全至根路径</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 正确</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">code</span>: <span class="number">20000</span>,</span><br><span class="line">  <span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line">  <span class="attr">message</span>: <span class="string">&quot;请求成功&quot;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span></span><br><span class="line">    <span class="attr">avatar</span>: <span class="string">&#x27;/files/bb313c99.png&#x27;</span>,</span><br><span class="line">    <span class="comment">// 或</span></span><br><span class="line">    <span class="attr">avatar</span>: <span class="string">&#x27;https://cdn.xxx.com/files/bb313c99.png&#x27;</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 错误</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">code</span>: <span class="number">20000</span>,</span><br><span class="line">  <span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line">  <span class="attr">message</span>: <span class="string">&quot;请求成功&quot;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span></span><br><span class="line">    <span class="attr">avatar</span>: <span class="string">&#x27;bb313c99.png&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-4-对于使用到文件的接口使用文件-id-或地址而非-FormData"><a href="#4-4-对于使用到文件的接口使用文件-id-或地址而非-FormData" class="headerlink" title="4.4 对于使用到文件的接口使用文件 id 或地址而非 FormData"></a>4.4 对于使用到文件的接口使用文件 id 或地址而非 FormData</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 正确</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;新任务 1&#x27;</span>,</span><br><span class="line">  <span class="attr">file_id</span>: <span class="string">&#x27;bb313c99&#x27;</span>,</span><br><span class="line">  <span class="comment">// 或</span></span><br><span class="line">  <span class="attr">file_url</span>: <span class="string">&#x27;/files/bb313c99.pdf&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 错误</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;新任务 1&#x27;</span>,</span><br><span class="line">  <span class="attr">file</span>: <span class="title class_">File</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：先由 POST <code>api/files</code> 上传完文件拿到文件 id 或地址后再执行后续操作</p>
<h1 id="5-敏感类接口"><a href="#5-敏感类接口" class="headerlink" title="5 敏感类接口"></a>5 敏感类接口</h1><h2 id="5-1-涉及到用户隐私的应对相关字段做加密处理"><a href="#5-1-涉及到用户隐私的应对相关字段做加密处理" class="headerlink" title="5.1 涉及到用户隐私的应对相关字段做加密处理"></a>5.1 涉及到用户隐私的应对相关字段做加密处理</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 正确</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span>,</span><br><span class="line">  <span class="attr">id_number</span>: <span class="string">&#x27;U2FsdGVkX1+1fW7OpO/tlPXe4IGA/bXExlhKwIR/spk=&#x27;</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="string">&#x27;U2FsdGVkX1/AnXKSBDbztNBfp4czlZxQ++3jRtNZhY0=&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span>,</span><br><span class="line">  <span class="attr">id_number</span>: <span class="string">&#x27;310000199511159999&#x27;</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="string">&#x27;ming@xxx.com&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：本规范不约定使用何种加密算法，请视实际场景选择</p>
<h1 id="6-图表类接口"><a href="#6-图表类接口" class="headerlink" title="6 图表类接口"></a>6 图表类接口</h1><h2 id="6-1-曲线图、柱状图"><a href="#6-1-曲线图、柱状图" class="headerlink" title="6.1 曲线图、柱状图"></a>6.1 曲线图、柱状图</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">code</span>: <span class="number">20000</span>,</span><br><span class="line">  <span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line">  <span class="attr">message</span>: <span class="string">&quot;请求成功&quot;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">x_axis</span>: [<span class="string">&#x27;2022.04.20&#x27;</span>,<span class="string">&#x27;2022.04.21&#x27;</span>, <span class="string">&#x27;2022.04.22&#x27;</span>]</span><br><span class="line">    <span class="attr">series</span>: [&#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;上海用户&#x27;</span>，</span><br><span class="line">      data： [<span class="number">5000</span>,<span class="number">4000</span>,<span class="number">3000</span>],</span><br><span class="line">      <span class="attr">color</span>: <span class="string">&#x27;#f5f5f5&#x27;</span> <span class="comment">// 可选，如果加上的话会使用该色值</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;成都用户&#x27;</span>，</span><br><span class="line">      data： [<span class="number">3000</span>,<span class="number">4000</span>,<span class="number">5000</span>],  <span class="comment">// 注意，没有数据时候也要使用 0 填充，和 x_axis 一一对应</span></span><br><span class="line">      <span class="attr">color</span>: <span class="string">&#x27;#f5f5f5&#x27;</span></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-2-饼图"><a href="#6-2-饼图" class="headerlink" title="6.2 饼图"></a>6.2 饼图</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">code</span>: <span class="number">20000</span>,</span><br><span class="line">  <span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line">  <span class="attr">message</span>: <span class="string">&quot;请求成功&quot;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">series</span>: [&#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;上线用户&#x27;</span>,</span><br><span class="line">      <span class="attr">value</span>: <span class="number">1890</span>,</span><br><span class="line">      <span class="attr">color</span>: <span class="string">&#x27;#f5f5f5&#x27;</span> <span class="comment">// 可选，如果加上的话会使用该色值</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;下线用户&#x27;</span>,</span><br><span class="line">      <span class="attr">value</span>: <span class="number">2000</span>,</span><br><span class="line">      <span class="attr">color</span>: <span class="string">&#x27;#f5f5f5&#x27;</span></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>git cat-file</title>
    <url>/repost/git-tutorial/commands/git-cat-file.html</url>
    <content><![CDATA[<p><code>git cat-file</code>命令显示一个Git对象文件的内容。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git cat-file -p aaa96</span><br></pre></td></tr></table></figure>

<p><code>p</code>参数表示以易于阅读的格式显示。</p>
]]></content>
  </entry>
  <entry>
    <title>git checkout</title>
    <url>/repost/git-tutorial/commands/git-checkout.html</url>
    <content><![CDATA[<p><code>git checkout</code>命令有多种用途。</p>
<p>（1）用来切换分支。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout</span><br></pre></td></tr></table></figure>

<p>上面命令表示回到先前所在的分支。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout develop</span><br></pre></td></tr></table></figure>

<p>上面命令表示切换到<code>develop</code>分支。</p>
<p>（2）切换到指定快照（commit）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout &lt;commitID&gt;</span><br></pre></td></tr></table></figure>

<p>（3）将工作区指定的文件恢复到上次提交的状态。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout -- &lt;filename&gt;</span><br></pre></td></tr></table></figure>

<p>上面命令将指定文件从暂存区复制到工作区，同时丢弃工作区对该文件的修改。所以，使用的时候必须小心，它会丢失对当前文件的修改，回到上一次保存到暂存区的状态。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout HEAD~ -- &lt;filename&gt;</span><br></pre></td></tr></table></figure>

<p>它还可以从其他分支或提交恢复指定文件，上例是<code>HEAD~</code>，这会同时改变暂存区和工作区。</p>
<p><code>-p</code>参数表示进入交互模式，手动选择恢复哪些文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout -p</span><br></pre></td></tr></table></figure>

<p>（4）切换到某个tag</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout tags/1.1.4</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">$ git checkout 1.1.4</span><br></pre></td></tr></table></figure>

<p>上面第二种用法的前提是，本地不能有叫做1.1.4的分支。</p>
<p>（5）生成新的分支。</p>
<p><code>-b</code>参数用于生成一个新的分支，并切换到该分支。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout -b new_branch</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>git cherry-pick</title>
    <url>/repost/git-tutorial/commands/git-cherry-pick.html</url>
    <content><![CDATA[<p>对于多分支的代码库，将代码从一个分支转移到另一个分支是常见需求。</p>
<p>这时分两种情况。一种情况是，你需要另一个分支的所有代码变动，那么就采用合并（<code>git merge</code>）。另一种情况是，你只需要部分代码变动（某几个提交），这时可以采用 Cherry pick。</p>
<p><img src="https://www.wangbase.com/blogimg/asset/202004/bg2020042723.jpg"></p>
<h2 id="一、基本用法"><a href="#一、基本用法" class="headerlink" title="一、基本用法"></a>一、基本用法</h2><p><code>git cherry-pick</code>命令的作用，就是将指定的提交（commit）应用于其他分支。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git cherry-pick &lt;commitHash&gt;</span><br></pre></td></tr></table></figure>

<p>上面命令就会将指定的提交<code>commitHash</code>，应用于当前分支。这会在当前分支产生一个新的提交，当然它们的哈希值会不一样。</p>
<p>举例来说，代码仓库有<code>master</code>和<code>feature</code>两个分支。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">a - b - c - d   Master</span><br><span class="line">     \</span><br><span class="line">       e - f - g Feature</span><br></pre></td></tr></table></figure>

<p>现在将提交<code>f</code>应用到<code>master</code>分支。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 切换到 master 分支</span></span><br><span class="line">$ git checkout master</span><br><span class="line"></span><br><span class="line"><span class="comment"># Cherry pick 操作</span></span><br><span class="line">$ git cherry-pick f</span><br></pre></td></tr></table></figure>

<p>上面的操作完成以后，代码库就变成了下面的样子。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">a - b - c - d - f   Master</span><br><span class="line">     \</span><br><span class="line">       e - f - g Feature</span><br></pre></td></tr></table></figure>

<p>从上面可以看到，<code>master</code>分支的末尾增加了一个提交<code>f</code>。</p>
<p><code>git cherry-pick</code>命令的参数，不一定是提交的哈希值，分支名也是可以的，表示转移该分支的最新提交。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git cherry-pick feature</span><br></pre></td></tr></table></figure>

<p>上面代码表示将<code>feature</code>分支的最近一次提交，转移到当前分支。</p>
<h2 id="二、转移多个提交"><a href="#二、转移多个提交" class="headerlink" title="二、转移多个提交"></a>二、转移多个提交</h2><p>Cherry pick 支持一次转移多个提交。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git cherry-pick &lt;HashA&gt; &lt;HashB&gt;</span><br></pre></td></tr></table></figure>

<p>上面的命令将 A 和 B 两个提交应用到当前分支。这会在当前分支生成两个对应的新提交。</p>
<p>如果想要转移一系列的连续提交，可以使用下面的简便语法。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git cherry-pick A..B </span><br></pre></td></tr></table></figure>

<p>上面的命令可以转移从 A 到 B 的所有提交。它们必须按照正确的顺序放置：提交 A 必须早于提交 B，否则命令将失败，但不会报错。</p>
<p>注意，使用上面的命令，提交 A 将不会包含在 Cherry pick 中。如果要包含提交 A，可以使用下面的语法。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git cherry-pick A^..B </span><br></pre></td></tr></table></figure>

<h2 id="三、配置项"><a href="#三、配置项" class="headerlink" title="三、配置项"></a>三、配置项</h2><p><code>git cherry-pick</code>命令的常用配置项如下。</p>
<p><strong>（1）<code>-e</code>，<code>--edit</code></strong></p>
<p>打开外部编辑器，编辑提交信息。</p>
<p><strong>（2）<code>-n</code>，<code>--no-commit</code></strong></p>
<p>只更新工作区和暂存区，不产生新的提交。</p>
<p><strong>（3）<code>-x</code></strong></p>
<p>在提交信息的末尾追加一行<code>(cherry picked from commit ...)</code>，方便以后查到这个提交是如何产生的。</p>
<p><strong>（4）<code>-s</code>，<code>--signoff</code></strong></p>
<p>在提交信息的末尾追加一行操作者的签名，表示是谁进行了这个操作。</p>
<p><strong>（5）<code>-m parent-number</code>，<code>--mainline parent-number</code></strong></p>
<p>如果原始提交是一个合并节点，来自于两个分支的合并，那么 Cherry pick 默认将失败，因为它不知道应该采用哪个分支的代码变动。</p>
<p><code>-m</code>配置项告诉 Git，应该采用哪个分支的变动。它的参数<code>parent-number</code>是一个从<code>1</code>开始的整数，代表原始提交的父分支编号。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git cherry-pick -m 1 &lt;commitHash&gt;</span><br></pre></td></tr></table></figure>

<p>上面命令表示，Cherry pick 采用提交<code>commitHash</code>来自编号1的父分支的变动。</p>
<p>一般来说，1号父分支是接受变动的分支（the branch being merged into），2号父分支是作为变动来源的分支（the branch being merged from）。 </p>
<h2 id="四、代码冲突"><a href="#四、代码冲突" class="headerlink" title="四、代码冲突"></a>四、代码冲突</h2><p>如果操作过程中发生代码冲突，Cherry pick 会停下来，让用户决定如何继续操作。</p>
<p><strong>（1）<code>--continue</code></strong></p>
<p>用户解决代码冲突后，第一步将修改的文件重新加入暂存区（<code>git add .</code>），第二步使用下面的命令，让 Cherry pick 过程继续执行。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git cherry-pick --<span class="built_in">continue</span></span><br></pre></td></tr></table></figure>

<p><strong>（2）<code>--abort</code></strong></p>
<p>发生代码冲突后，放弃合并，回到操作前的样子。</p>
<p><strong>（3）<code>--quit</code></strong></p>
<p>发生代码冲突后，退出 Cherry pick，但是不回到操作前的样子。</p>
<h2 id="五、转移到另一个代码库"><a href="#五、转移到另一个代码库" class="headerlink" title="五、转移到另一个代码库"></a>五、转移到另一个代码库</h2><p>Cherry pick 也支持转移另一个代码库的提交，方法是先将该库加为远程仓库。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git remote add target git://gitUrl</span><br></pre></td></tr></table></figure>

<p>上面命令添加了一个远程仓库<code>target</code>。</p>
<p>然后，将远程代码抓取到本地。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git fetch target</span><br></pre></td></tr></table></figure>

<p>上面命令将远程代码仓库抓取到本地。</p>
<p>接着，检查一下要从远程仓库转移的提交，获取它的哈希值。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> target/master</span><br></pre></td></tr></table></figure>

<p>最后，使用<code>git cherry-pick</code>命令转移提交。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git cherry-pick &lt;commitHash&gt;</span><br></pre></td></tr></table></figure>

<p>（完）</p>
]]></content>
  </entry>
  <entry>
    <title>git add</title>
    <url>/repost/git-tutorial/commands/git-add.html</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><code>git add</code>命令用于将变化的文件，从工作区提交到暂存区。它的作用就是告诉 Git，下一次哪些变化需要保存到仓库区。用户可以使用<code>git status</code>命令查看目前的暂存区放置了哪些文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将指定文件放入暂存区</span></span><br><span class="line">$ git add &lt;file&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将指定目录下所有变化的文件，放入暂存区</span></span><br><span class="line">$ git add &lt;directory&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将当前目录下所有变化的文件，放入暂存区</span></span><br><span class="line">$ git add .</span><br></pre></td></tr></table></figure>

<h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p><code>-u</code>参数表示只添加暂存区已有的文件（包括删除操作），但不添加新增的文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git add -u</span><br></pre></td></tr></table></figure>

<p><code>-A</code>或者<code>--all</code>参数表示追踪所有操作，包括新增、修改和删除。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git add -A</span><br></pre></td></tr></table></figure>

<p>Git 2.0 版开始，<code>-A</code>参数成为默认，即<code>git add .</code>等同于<code>git add -A</code>。</p>
<p><code>-f</code>参数表示强制添加某个文件，不管<code>.gitignore</code>是否包含了这个文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git add -f &lt;fileName&gt;</span><br></pre></td></tr></table></figure>

<p><code>-p</code>参数表示进入交互模式，指定哪些修改需要添加到暂存区。即使是同一个文件，也可以只提交部分变动。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git add -p</span><br></pre></td></tr></table></figure>

<p>注意，Git 2.0 版以前，<code>git add</code>默认不追踪删除操作。即在工作区删除一个文件后，<code>git add</code>命令不会将这个变化提交到暂存区，导致这个文件继续存在于历史中。Git 2.0 改变了这个行为。</p>
<h2 id="实现细节"><a href="#实现细节" class="headerlink" title="实现细节"></a>实现细节</h2><p>通过<code>git add</code>这个命令，工作区里面那些新建或修改过的文件，会加入<code>.git/objects/</code>目录，文件名是文件内容的 SHA1 哈希值。<code>git add</code>命令同时还将这些文件的文件名和对应的哈希值，写入<code>.git/index</code>文件，每一行对应一个文件。</p>
<p>下面是<code>.git/index</code>文件的内容。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">data/letter.txt 5e40c0877058c504203932e5136051cf3cd3519b</span><br></pre></td></tr></table></figure>

<p>上面代码表示，<code>data/letter.txt</code>文件的哈希值是<code>5e40c087...</code>。可以根据这个哈希值到<code>.git/objects/</code>目录下找到添加后的文件。</p>
]]></content>
  </entry>
  <entry>
    <title>git branch</title>
    <url>/repost/git-tutorial/commands/git-branch.html</url>
    <content><![CDATA[<p><code>git branch</code>是分支操作命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出所有本地分支</span></span><br><span class="line">$ git branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有本地分支和远程分支</span></span><br><span class="line">$ git branch -a</span><br></pre></td></tr></table></figure>

<p>（1）新建一个分支</p>
<p>直接在<code>git branch</code>后面跟上分支名，就表示新建该分支。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git branch develop</span><br></pre></td></tr></table></figure>

<p>新建一个分支，指向当前 commit。本质是在<code>refs/heads/</code>目录中生成一个文件，文件名为分支名，内容为当前 commit 的哈希值。</p>
<p>注意，创建后，还是停留在原来分支，需要用<code>git checkout</code>切换到新建分支。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout develop</span><br></pre></td></tr></table></figure>

<p>使用<code>-b</code>参数，可以新建的同时，切换到新分支。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout -b NewBranch MyBranch</span><br></pre></td></tr></table></figure>

<p>（2）删除分支</p>
<p><code>-d</code>参数用来删除一个分支，前提是该分支没有未合并的变动。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git branch -d &lt;分支名&gt;</span><br></pre></td></tr></table></figure>

<p>强制删除一个分支，不管有没有未合并变化。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git branch -D &lt;分支名&gt;</span><br></pre></td></tr></table></figure>

<p>（3）分支改名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout -b twitter-experiment feature132</span><br><span class="line">$ git branch -d feature132</span><br></pre></td></tr></table></figure>

<p>另一种写法</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 为当前分支改名</span></span><br><span class="line">$ git branch -m twitter-experiment</span><br><span class="line"></span><br><span class="line"><span class="comment"># 为指定分支改名</span></span><br><span class="line">$ git branch -m feature132 twitter-experiment</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果有重名分支，强制改名</span></span><br><span class="line">$ git branch -m feature132 twitter-experiment</span><br></pre></td></tr></table></figure>

<p>（4）查看 merge 情况</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Shows branches that are all merged in to your current branch</span></span><br><span class="line">$ git branch --merged</span><br><span class="line"></span><br><span class="line"><span class="comment"># Shows branches that are not merged in to your current branch</span></span><br><span class="line">$ git branch --no-merged</span><br></pre></td></tr></table></figure>

<h2 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h2><h3 id="d"><a href="#d" class="headerlink" title="-d"></a>-d</h3><p><code>-d</code>参数用于删除一个指定分支。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git branch -d &lt;branchname&gt;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>git clone</title>
    <url>/repost/git-tutorial/commands/git-clone.html</url>
    <content><![CDATA[<p><code>git clone</code>命令用于克隆远程分支。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> alpha delta --bare</span><br></pre></td></tr></table></figure>

<p>上面命令表示将alpha目录（必须是git代码仓库），克隆到delta目录。bare参数表示delta目录只有仓库区，没有工作区和暂存区，即delta目录中就是.git目录的内容。</p>
]]></content>
  </entry>
  <entry>
    <title>git commit-tree</title>
    <url>/repost/git-tutorial/commands/git-commit-tree.html</url>
    <content><![CDATA[<p>根据一个树对象，生成新的commit对象。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git commit-tree 16e19f -m “First commit”</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>git commit</title>
    <url>/repost/git-tutorial/commands/git-commit.html</url>
    <content><![CDATA[<p><code>git commit</code>命令用于将暂存区中的变化提交到仓库区。</p>
<p><code>-m</code>参数用于指定 commit 信息，是必需的。如果省略<code>-m</code>参数，<code>git commit</code>会自动打开文本编辑器，要求输入。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git commit -m <span class="string">&quot;message&quot;</span></span><br></pre></td></tr></table></figure>

<p><code>git commit</code>命令可以跳过暂存区，直接将文件从工作区提交到仓库区。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git commit &lt;filename&gt;  -m <span class="string">&quot;message&quot;</span></span><br></pre></td></tr></table></figure>

<p>上面命令会将工作区中指定文件的变化，先添加到暂存区，然后再将暂存区提交到仓库区。</p>
<h2 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h2><h3 id="a"><a href="#a" class="headerlink" title="-a"></a>-a</h3><p><code>-a</code>参数用于先将所有工作区的变动文件，提交到暂存区，再运行<code>git commit</code>。用了<code>-a</code>参数，就不用执行<code>git add .</code>命令了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git commit -am <span class="string">&quot;message&quot;</span></span><br></pre></td></tr></table></figure>

<p>如果没有指定提交说明，运行下面的命令会直接打开默认的文本编辑器，让用户撰写提交说明。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git commit -a</span><br></pre></td></tr></table></figure>

<h3 id="–allow-empty"><a href="#–allow-empty" class="headerlink" title="–allow-empty"></a>–allow-empty</h3><p><code>--allow-empty</code>参数用于没有提交信息的 commit。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git commit --allow-empty</span><br></pre></td></tr></table></figure>

<h3 id="–amend"><a href="#–amend" class="headerlink" title="–amend"></a>–amend</h3><p><code>--amend</code>参数用于撤销上一次 commit，然后生成一个新的 commit。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git commit --amend - m <span class="string">&quot;new commit message&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="–fixup"><a href="#–fixup" class="headerlink" title="–fixup"></a>–fixup</h3><p><code>--fixup</code>参数的含义是，当前添加的 commit 是以前某一个 commit 的修正。以后执行互动式的<code>git rebase</code>的时候，这两个 commit 将会合并成一个。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git commit --fixup &lt;commit&gt;</span><br></pre></td></tr></table></figure>

<p>执行上面的命令，提交说明将自动生成，即在目标 commit 的提交说明的最前面，添加“fixup! ”这个词。</p>
<h3 id="m"><a href="#m" class="headerlink" title="-m"></a>-m</h3><p><code>-m</code>参数用于添加提交说明。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git commit -m <span class="string">&quot;message&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="–squash"><a href="#–squash" class="headerlink" title="–squash"></a>–squash</h3><p><code>--squash</code>参数的作用与<code>--fixup</code>类似，表示当前添加的 commit 应该与以前某一个 commit 合并成一个，以后执行互动式的<code>git rebase</code>的时候，这两个 commit 将会合并成一个。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git commit --squash &lt;commit&gt;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>git diff</title>
    <url>/repost/git-tutorial/commands/git-diff.html</url>
    <content><![CDATA[<p><code>git diff</code>命令用于查看文件之间的差异。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看工作区与暂存区的差异</span></span><br><span class="line">$ git diff</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看某个文件的工作区与暂存区的差异</span></span><br><span class="line">$ git diff file.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看暂存区与当前 commit 的差异</span></span><br><span class="line">$ git diff --cached</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看两个commit的差异</span></span><br><span class="line">$ git diff &lt;commitBefore&gt; &lt;commitAfter&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看暂存区与仓库区的差异</span></span><br><span class="line">$ git diff --cached</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看工作区与上一次commit之间的差异</span></span><br><span class="line"><span class="comment"># 即如果执行 git commit -a，将提交的文件</span></span><br><span class="line">$ git diff HEAD</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看工作区与某个 commit 的差异</span></span><br><span class="line">$ git diff &lt;commit&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示两次提交之间的差异</span></span><br><span class="line">$ git diff [first-branch]...[second-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看工作区与当前分支上一次提交的差异，但是局限于test文件</span></span><br><span class="line">$ git diff HEAD -- ./test</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前分支上一次提交与上上一次提交之间的差异</span></span><br><span class="line">$ git diff HEAD -- ./test</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成patch</span></span><br><span class="line">$ git format-patch master --stdout &gt; mypatch.patch</span><br></pre></td></tr></table></figure>

<p>比较两个分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看topic分支与master分支最新提交之间的差异</span></span><br><span class="line">$ git diff topic master</span><br><span class="line"></span><br><span class="line"><span class="comment"># 与上一条命令相同</span></span><br><span class="line">$ git diff topic..master</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看自从topic分支建立以后，master分支发生的变化</span></span><br><span class="line">$ git diff topic...master</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>git hash-object</title>
    <url>/repost/git-tutorial/commands/git-hash-object.html</url>
    <content><![CDATA[<p><code>git hash-object</code>命令计算一个文件的git对象ID，即SHA1的哈希值。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;hello&quot;</span> | git hash-object --stdin</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;hola&quot;</span> | git hash-object -w --stdin</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>参数</p>
<ul>
<li>w 将对象写入对象数据库</li>
<li>stdin 表示从标准输入读取，而不是从本地文件读取。</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>git init</title>
    <url>/repost/git-tutorial/commands/git-init.html</url>
    <content><![CDATA[<p><code>git init</code>命令将当前目录转为git仓库。</p>
<p>它会在当前目录下生成一个.git子目录，在其中写入git的配置和项目的快照。</p>
]]></content>
  </entry>
  <entry>
    <title>git log</title>
    <url>/repost/git-tutorial/commands/git-log.html</url>
    <content><![CDATA[<p><code>git log</code>命令按照提交时间从最晚到最早的顺序，列出所有 commit。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出当前分支的版本历史</span></span><br><span class="line">$ git <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出某个文件的版本历史，包括文件改名</span></span><br><span class="line">$ git <span class="built_in">log</span> --follow [file]</span><br></pre></td></tr></table></figure>

<p>查看远程分支的变动情况。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> remote/branch</span><br></pre></td></tr></table></figure>

<p>查找log，即搜索commit信息。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --author=Andy</span><br><span class="line">$ git <span class="built_in">log</span> -i --grep=<span class="string">&quot;Something in the message&quot;</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>-i</code>参数表示搜索时忽略大小写。</p>
<p>查看某个范围内的commit</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> origin/master..new</span><br><span class="line"><span class="comment"># [old]..[new] - everything you haven&#x27;t pushed yet</span></span><br></pre></td></tr></table></figure>

<p>美化输出。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --graph --decorate --pretty=oneline --abbrev-commit</span><br></pre></td></tr></table></figure>

<ul>
<li>–graph commit之间将展示连线</li>
<li>–decorate 显示commit里面的分支</li>
<li>–pretty&#x3D;oneline 只显示commit信息的标题</li>
<li>–abbrev-commit 只显示commit SHA1的前7位</li>
</ul>
<h2 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h2><h3 id="–oneline"><a href="#–oneline" class="headerlink" title="–oneline"></a>–oneline</h3><p><code>git log</code>默认输出每个 commit 的详细信息，为了节省空间，<code>--oneline</code>参数让输出时，每个 commit 只占用一行。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --oneline --decorate</span><br><span class="line">ccc3333 (HEAD, my-feature-branch) A third commit</span><br><span class="line">bbb2222 A second commit</span><br><span class="line">aaa1111 A first commit</span><br><span class="line">9999999 (master) Old stuff on master</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>git ls-files</title>
    <url>/repost/git-tutorial/commands/git-ls-files.html</url>
    <content><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出没有被.gitignore忽视的文件</span></span><br><span class="line">$ git ls-files --other --ignored --exclude-standard</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>git rebase</title>
    <url>/repost/git-tutorial/commands/git-rebase.html</url>
    <content><![CDATA[<p>git rebase 将当前分支移植到指定分支或指定commit之上。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git rebase -i &lt;commit&gt;</span><br></pre></td></tr></table></figure>

<p>互动的rebase。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git rebase -i master~3</span><br></pre></td></tr></table></figure>

<h2 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h2><h3 id="–autosquash"><a href="#–autosquash" class="headerlink" title="–autosquash"></a>–autosquash</h3><p><code>--autosquash</code>参数用于互动模式，必须与<code>-i</code>参数配合使用。它会使得以前通过<code>git commit --fixup</code>和<code>git commit --squash</code>提交的 commit，按照指定的顺序排列（实质是选择提交说明以以<code>fixup!</code>或<code>squash!</code>开头的 commit），即<code>--fixup</code>的 commit 直接排在它所对应的 commit 的后面。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git rebase --interactive --autosquash &lt;branch&gt;</span><br></pre></td></tr></table></figure>

<h3 id="–continue"><a href="#–continue" class="headerlink" title="–continue"></a>–continue</h3><p><code>--continue</code>参数用于解决冲突以后，继续执行 rebase。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git rebase --<span class="built_in">continue</span></span><br></pre></td></tr></table></figure>

<h3 id="i，–interactive"><a href="#i，–interactive" class="headerlink" title="-i，–interactive"></a>-i，–interactive</h3><p><code>-i</code>参数会打开互动模式，让用户选择定制<code>rebase</code>的行为。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git rebase -i develop</span><br></pre></td></tr></table></figure>

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://robots.thoughtbot.com/autosquashing-git-commits">Auto-squashing Git Commits</a>, by George Brocklehurst</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>git remote</title>
    <url>/repost/git-tutorial/commands/git-remote.html</url>
    <content><![CDATA[<p>为远程仓库添加别名。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git remote add john git@github.com:johnsomeone/someproject.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有的远程主机</span></span><br><span class="line">$ git remote -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出某个主机的详细信息</span></span><br><span class="line">$ git remote show name</span><br></pre></td></tr></table></figure>

<p><code>git remote</code>命令的实质是在<code>.git/config</code>文件添加下面的内容。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git remote add bravo ../bravo</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[remote &quot;bravo&quot;]</span><br><span class="line">    url = ../bravo/</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>git reset</title>
    <url>/repost/git-tutorial/commands/git-reset.html</url>
    <content><![CDATA[<p><code>git reset</code>命令用于将当前分支指向另一个位置。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将当期分支的指针倒退三个 commit，</span></span><br><span class="line"><span class="comment"># 并且会改变暂存区</span></span><br><span class="line">$ git reset HEAD~3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 倒退指针的同时，不改变暂存区</span></span><br><span class="line">$ git reset --soft HEAD~3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 倒退指针的同时，改变工作区</span></span><br><span class="line">$ git reset --hard HEAD~3</span><br></pre></td></tr></table></figure>

<p>如果不指定回滚的位置，那么等同于撤销修改。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 撤销上一次向暂存区添加的所有文件</span></span><br><span class="line">$ git reset</span><br><span class="line"></span><br><span class="line"><span class="comment"># 无任何效果</span></span><br><span class="line">$ git reset --soft</span><br><span class="line"></span><br><span class="line"><span class="comment"># 同时撤销暂存区和工作区的修改，</span></span><br><span class="line"><span class="comment"># 回复到上一次提交的状态</span></span><br><span class="line">$ git reset --hard</span><br><span class="line"></span><br><span class="line"><span class="comment"># 撤销上一次向暂存区添加的某个指定文件，</span></span><br><span class="line"><span class="comment"># 不影响工作区中的该文件</span></span><br><span class="line">$ git reset -- &lt;filename&gt;</span><br></pre></td></tr></table></figure>

<h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><ul>
<li>soft: 不改变工作区和缓存区，只移动 HEAD 到指定 commit。</li>
<li>mixed: 只改变缓存区，不改变工作区。这是默认参数，通常用于撤销<code>git add</code>。</li>
<li>hard：改变工作区和暂存区到指定 commit。该参数等同于重置，可能会引起数据损失。<code>git reset --hard</code>等同于<code>git reset --hard HEAD</code>。</li>
<li><code>-p</code>表示键入交互模式，指定暂存区的哪些部分需要撤销。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Undo add</span></span><br><span class="line">$ git reset</span><br><span class="line"></span><br><span class="line"><span class="comment"># Undo a commit，不重置工作区和缓存区</span></span><br><span class="line"><span class="comment"># 回到 HEAD 之前的那个 commit</span></span><br><span class="line">$ git reset --soft HEAD^</span><br><span class="line"></span><br><span class="line"><span class="comment"># Undo a commit，重置工作区和缓存区</span></span><br><span class="line"><span class="comment"># 连续撤销三个 commit：HEAD, HEAD^, and HEAD~2</span></span><br><span class="line">$ git reset --hard HEAD~3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从暂存区移除指定文件，但不改变工作区中的该文件</span></span><br><span class="line">$ git reset -- frotz.c</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>git restore</title>
    <url>/repost/git-tutorial/commands/git-restore.html</url>
    <content><![CDATA[<p><code>git restore</code>是 Git 2.23 版本新增的命令，用于恢复文件，可以替代<code>git checkout</code>的部分功能。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git restore -- test.txt</span><br></pre></td></tr></table></figure>

<p>上面命令将从暂存区恢复<code>test.txt</code>文件，该文件的本地修改将全部丢失。</p>
]]></content>
  </entry>
  <entry>
    <title>git rev-parse</title>
    <url>/repost/git-tutorial/commands/git-rev-parse.html</url>
    <content><![CDATA[<p>显示某个指示符的SHA1哈希值。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git rev-parse HEAD</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>git pull</title>
    <url>/repost/git-tutorial/commands/git-pull.html</url>
    <content><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 合并指定分支到当前分支</span></span><br><span class="line">$ git pull . topic/branch</span><br></pre></td></tr></table></figure>

<p>即使当前分支有没有 commit 的变动，也可以使用<code>git pull</code>从远程拉取分支。</p>
]]></content>
  </entry>
  <entry>
    <title>git merge</title>
    <url>/repost/git-tutorial/commands/git-merge.html</url>
    <content><![CDATA[<p>将当前分支合并到指定分支。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">$ git merge develop</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>将当前分支与develop分支合并，产生的新的commit对象有两个父节点。</p>
<p>如果“指定分支”本身是当前分支的一个直接子节点，则会产生fast-forward合并，即合并不会产生新的节点，只是让当前分支指向“指定分支”的最新commit。</p>
<p>Git合并所采用的方法是Three-way merge，及合并的时候除了要合併的兩個檔案，還加上它们共同的父节点。这样可以大大減少人為處理 conflict 的情況。如果采用two-way merge，則只用兩個檔案進行合併（svn默认就是这种合并方法。）</p>
]]></content>
  </entry>
  <entry>
    <title>git revert</title>
    <url>/repost/git-tutorial/commands/git-revert.html</url>
    <content><![CDATA[<p><code>git revert</code>命令用于撤销commit。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git revert &lt;commitID&gt;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>git rm</title>
    <url>/repost/git-tutorial/commands/git-rm.html</url>
    <content><![CDATA[<p><code>git rm</code>命令用于删除文件。</p>
<p>解除追踪某个文件，即该文件已被<code>git add</code>添加，然后抵消这个操作。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">rm</span> --cached &lt;fileName&gt;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>git show</title>
    <url>/repost/git-tutorial/commands/git-show.html</url>
    <content><![CDATA[<p><code>git show</code>命令用于查看commit的内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输出某次提交的元数据和内容变化</span></span><br><span class="line">$ git show [commit]</span><br><span class="line"></span><br><span class="line">$ git show 12a86bc38 <span class="comment"># By revision</span></span><br><span class="line">$ git show v1.0.1 <span class="comment"># By tag</span></span><br><span class="line">$ git show feature132 <span class="comment"># By branch name</span></span><br><span class="line">$ git show 12a86bc38^ <span class="comment"># Parent of a commit</span></span><br><span class="line">$ git show 12a86bc38~2 <span class="comment"># Grandparent of a commit</span></span><br><span class="line">$ git show feature132@&#123;yesterday&#125; <span class="comment"># Time relative</span></span><br><span class="line">$ git show feature132@&#123;2.hours.ago&#125; <span class="comment"># Time relative</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>git switch</title>
    <url>/repost/git-tutorial/commands/git-switch.html</url>
    <content><![CDATA[<p><code>git switch</code>是 Git 2.23 版本新增的命名，用来切换分支，跟<code>git checkout</code>的作用类似，但有更好的语义。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git switch develop</span><br></pre></td></tr></table></figure>

<p>上面命令切换到 develop 分支。</p>
<p>如果要切换到分离状态的（detached）的提交，需要使用<code>-d</code>参数。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git switch -d f8c540805b7e16753c65619ca3d7514178353f39</span><br></pre></td></tr></table></figure>

<p>上面命令切换到指定提交。</p>
<p><code>-c</code>参数（create）用于生成一个新的分支。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git switch -c new_branch</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>git stash</title>
    <url>/repost/git-tutorial/commands/git-stash.html</url>
    <content><![CDATA[<p><code>git stash</code>命令用于暂时保存没有提交的工作。运行该命令后，所有没有commit的代码，都会暂时从工作区移除，回到上次commit时的状态。</p>
<p>它处于<code>git reset --hard</code>（完全放弃还修改了一半的代码）与<code>git commit</code>（提交代码）命令之间，很类似于“暂停”按钮。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 暂时保存没有提交的工作</span></span><br><span class="line">$ git stash</span><br><span class="line">Saved working directory and index state WIP on workbranch: 56cd5d4 Revert <span class="string">&quot;update old files&quot;</span></span><br><span class="line">HEAD is now at 56cd5d4 Revert <span class="string">&quot;update old files&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有暂时保存的工作</span></span><br><span class="line">$ git stash list</span><br><span class="line">stash@&#123;0&#125;: WIP on workbranch: 56cd5d4 Revert <span class="string">&quot;update old files&quot;</span></span><br><span class="line">stash@&#123;1&#125;: WIP on project1: 1dd87ea commit <span class="string">&quot;fix typos and grammar&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复某个暂时保存的工作</span></span><br><span class="line">$ git stash apply stash@&#123;1&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复最近一次stash的文件</span></span><br><span class="line">$ git stash pop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 丢弃最近一次stash的文件</span></span><br><span class="line">$ git stash drop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除所有的stash</span></span><br><span class="line">$ git stash clear</span><br></pre></td></tr></table></figure>

<p>上面命令会将所有已提交到暂存区，以及没有提交的修改，都进行内部保存，没有将工作区恢复到上一次commit的状态。</p>
<p>使用下面的命令，取回内部保存的变化，它会与当前工作区的代码合并。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git stash pop</span><br></pre></td></tr></table></figure>

<p>这时，如果与当前工作区的代码有冲突，需要手动调整。</p>
<p><code>git stash</code>命令可以运行多次，保存多个未提交的修改。这些修改以“先进后出”的stack结构保存。</p>
<p><code>git stash list</code>命令查看内部保存的多次修改。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git stash list</span><br><span class="line">stash@&#123;0&#125;: WIP on new-feature: 5cedccc Try something crazy</span><br><span class="line">stash@&#123;1&#125;: WIP on new-feature: 9f44b34 Take a different direction</span><br><span class="line">stash@&#123;2&#125;: WIP on new-feature: 5acd291 Begin new feature</span><br></pre></td></tr></table></figure>

<p>上面命令假设曾经运行过<code>git stash</code>命令三次。</p>
<p><code>git stash pop</code>命令总是取出最近一次的修改，但是可以用<code>git stash apply</code>指定取出某一次的修改。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git stash apply stash@&#123;1&#125;</span><br></pre></td></tr></table></figure>

<p>上面命令不会自动删除取出的修改，需要手动删除。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git stash drop stash@&#123;1&#125;</span><br></pre></td></tr></table></figure>

<p>git stash 子命令一览。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 展示目前存在的stash</span></span><br><span class="line">$ git stash show -p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换回stash</span></span><br><span class="line">$ git stash pop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除stash</span></span><br><span class="line">$ git stash clear</span><br></pre></td></tr></table></figure>

<p>参考链接</p>
<ul>
<li>Ryan Hodson, <a href="http://code.tutsplus.com/tutorials/quick-tip-leveraging-the-power-of-git-stash--cms-22988">Quick Tip: Leveraging the Power of Git Stash</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>git tag</title>
    <url>/repost/git-tutorial/commands/git-tag.html</url>
    <content><![CDATA[<p><code>git tag</code>命令用于为 commit 打标签。Tag 分两种：普通tag和注解tag。只有annotated tag 才會產生 object。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git tag tmp <span class="comment"># 生成.git/refs/tags/tmp</span></span><br><span class="line">$ git tag -a release</span><br><span class="line">$ git tag -a [VERSION] -m <span class="string">&quot;released [VERSION]&quot;</span></span><br></pre></td></tr></table></figure>

<p>上面代码表示为当前commit打上一个带注解的标签，标签名为release。</p>
<p>普通标签的写法。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git tag 1.0.0</span><br><span class="line">$ git push --tags</span><br><span class="line"></span><br><span class="line">$ git tag v0.0.1</span><br><span class="line">$ git push origin master --tags</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>git update-index</title>
    <url>/repost/git-tutorial/commands/git-update-index.html</url>
    <content><![CDATA[<p>将工作区的文件加入缓存区域。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git update-index --add --cacheinfo \</span><br><span class="line">100644 5c1b14949828006ed75a3e8858957f86a2f7e2eb hola.txt</span><br></pre></td></tr></table></figure>

<p>直接将缓存信息插入缓存文件。</p>
]]></content>
  </entry>
  <entry>
    <title>git update-ref</title>
    <url>/repost/git-tutorial/commands/git-update-ref.html</url>
    <content><![CDATA[<p><code>git update-ref</code>命令用于更新一个指针文件中的Git对象ID。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git update-ref refs/heads/master 107aff</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>git write-tree</title>
    <url>/repost/git-tutorial/commands/git-write-tree.html</url>
    <content><![CDATA[<p><code>git write-tree</code>命令用于根据当前缓存区域，生成一个树对象。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git write-tree</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
</search>
